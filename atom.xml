<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://imcm.xyz</id>
    <title>IMCM</title>
    <updated>2020-11-19T08:34:23.997Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://imcm.xyz"/>
    <link rel="self" href="https://imcm.xyz/atom.xml"/>
    <subtitle>&lt;span id=&quot;jinrishici-sentence&quot;&gt;正在加载今日诗词....&lt;/span&gt;
&lt;script src=&quot;https://sdk.jinrishici.com/v2/browser/jinrishici.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;br&gt;</subtitle>
    <logo>https://imcm.xyz/images/avatar.png</logo>
    <icon>https://imcm.xyz/favicon.ico</icon>
    <rights>All rights reserved 2020, IMCM</rights>
    <entry>
        <title type="html"><![CDATA[术语对照表]]></title>
        <id>https://imcm.xyz/net-info/</id>
        <link href="https://imcm.xyz/net-info/">
        </link>
        <updated>2020-09-15T03:41:37.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="osi">OSI</h2>
<p>开放式系统互联通信参考模型（英语：Open System Interconnection Reference Model，缩写为 OSI），简称为OSI模型（OSI model），一种概念模型，由国际标准化组织提出，一个试图使各种计算机在世界范围内互连为网络的标准框架</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="osi">OSI</h2>
<p>开放式系统互联通信参考模型（英语：Open System Interconnection Reference Model，缩写为 OSI），简称为OSI模型（OSI model），一种概念模型，由国际标准化组织提出，一个试图使各种计算机在世界范围内互连为网络的标准框架</p>
<!-- more -->
<h2 id="tcpip">TCP/IP</h2>
<p>互联网协议套件（英语：Internet Protocol Suite，缩写IPS）是一个网络通信模型，以及一整个网络传输协议家族，为网际网络的基础通信架构。它常被通称为TCP/IP协议族（英语：TCP/IP Protocol Suite，或TCP/IP Protocols），简称TCP/IP</p>
<h2 id="dns">DNS</h2>
<p>'域名系统（英文：Domain Name System，缩写： 'DNS）是互联网的一项服务。它作为将域名和 IP 地址相互映射的一个分布式数据库，能够使人更方便地访问互联网</p>
<h2 id="udp">UDP</h2>
<p>用户数据包协议（英语：User Datagram Protocol，缩写：UDP），又称用户数据包协议，是一个简单的面向数据报的传输层协议</p>
<h2 id="icmp">ICMP</h2>
<p>互联网控制消息协议（英语：Internet Control Message Protocol，缩写：ICMP）是互联网协议族的核心协议之一。它用于TCP/IP网络中发送控制消息，提供可能发生在通信环境中的各种问题反馈，通过这些信息，使管理者可以对所发生的问题作出诊断，然后采取适当的措施解决</p>
<h2 id="tcp">TCP</h2>
<p>传输控制协议（英语：Transmission Control Protocol，缩写：TCP）是一种面向连接的、可靠的、基于字节流的传输层通信协议</p>
<h2 id="arq">ARQ</h2>
<p>自动重传请求（Automatic Repeat-reQuest，ARQ）是OSI模型中数据链路层的错误纠正协议之一。它包括停止等待ARQ协议和连续ARQ协议，错误侦测（Error Detection）、正面确认（Positive Acknowledgment）、逾时重传（Retransmission after Timeout）与负面确认继以重传（Negative Acknowledgment and Retransmission）等机制</p>
<h2 id="syn">SYN</h2>
<p>同步序列编号（Synchronize Sequence Numbers）</p>
<h2 id="ack">ACK</h2>
<p>ACK (Acknowledgement）即是确认字符，在数据通信中，接收站发给发送站的一种传输类控制字符。表示发来的数据已确认接收无误</p>
<h2 id="tcb">TCB</h2>
<p>传输控制块 TCB(Transmission Control Block)存储了每一个连接中的一些重要信息，如：TCP 连接表，指向发送和接收缓存的指针，指向重传队列的指针，当前的发送和接收序号等等</p>
<h2 id="http">HTTP</h2>
<p>超文本传输协议（英语：HyperText Transfer Protocol，缩写：HTTP）是一种用于分布式、协作式和超媒体信息系统的应用层协议</p>
<h2 id="ssltls">SSL/TLS</h2>
<p>传输层安全性协议（英语：Transport Layer Security，缩写作 TLS），及其前身安全套接层（Secure Sockets Layer，缩写作 SSL）是一种安全协议，目的是为互联网通信提供安全及数据完整性保障</p>
<h2 id="adt">ADT</h2>
<p>抽象数据类型（Abstract Data Type，ADT）是计算机科学中具有类似行为的特定类别的数据结构的数学模型；或者具有类似语义的一种或多种程序设计语言的数据类型。抽象数据类型是间接定义的，通过其上的可执行的操作以及这些操作的效果的数学约束（与可能的代价）</p>
<h2 id="php">PHP</h2>
<p>PHP（全称：PHP：Hypertext Preprocessor，即“PHP：超文本预处理器”）是一种开源的通用计算机脚本语言，尤其适用于网络开发并可嵌入 HTML 中使用</p>
<h2 id="fpm">FPM</h2>
<p>FPM(FastCGI Process Manager, FPM)是 PHP FastCGI 运行模式的一个进程管理器</p>
<h2 id="mvc">MVC</h2>
<p>MVC模式（Model–view–controller）是软件工程中的一种软件架构模式，把软件系统分为三个基本部分：模型（Model）、视图（View）和控制器（Controller）</p>
<h2 id="orm">ORM</h2>
<p>对象关系映射（英语：Object Relational Mapping，简称ORM，或O/RM，或O/R mapping），是一种程序设计技术，用于实现面向对象编程语言里不同类型系统的数据之间的转换</p>
<h2 id="pdo">PDO</h2>
<p>PDO（PHP Data Objects） PHP 数据对象，是 PHP 应用中的一个数据库抽象层规范。PDO提供了一个统一的 API 接口可以使得你的 PHP 应用不去关心具体要 连接的数据库服务器系统类型</p>
<h2 id="oop">OOP</h2>
<p>面向对象编程（Object Oriented Programming，OOP，面向对象程序设计）是一种计算机编程架构</p>
<h2 id="dom">DOM</h2>
<p>文档对象模型（Document Object Model，简称DOM），是W3C组织推荐的处理可扩展标志语言的标准编程接口。在网页上，组织页面（或文档）的对象被组织在一个树形结构中，用来表示文档中对象的标准模型就称为DOM</p>
<h2 id="cors">CORS</h2>
<h2 id="json">JSON</h2>
<p>JSON(JavaScript Object Notation, JS 对象简谱) 是一种轻量级的数据交换格式</p>
<h2 id="jsonp">JSONP</h2>
<p>JSONP(JSON with Padding)是JSON的一种“使用模式”，可用于解决主流浏览器的跨域数据访问的问题</p>
<h2 id="rdb">RDB</h2>
<p>RDB(Redis Database)，在指定时间间隔对 Redis 内存数据进行快照存储</p>
<h2 id="aof">AOF</h2>
<p>只追加文件(append-only file，AOF)，在执行写命令时，将被执行的写命令复制到磁盘里面</p>
<h2 id="ipc">IPC</h2>
<p>进程间通信（IPC，Inter-Process Communication），指至少两个进程或线程间传送数据或信号的一些技术或方法</p>
<h2 id="qps">QPS</h2>
<p>每秒查询率 QPS(Query Per Second) 是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准</p>
<h2 id="tps">TPS</h2>
<p>Transactions Per Second（每秒传输的事物处理个数），即服务器每秒处理的事务数</p>
<h2 id="xss">XSS</h2>
<p>跨站脚本（英语：Cross-site scripting，通常简称为：XSS）是一种网站应用程序的安全漏洞攻击，是代码注入的一种。它允许恶意用户将代码注入到网页上，其他用户在观看网页时就会受到影响</p>
<h2 id="csrf">CSRF</h2>
<p>跨站请求伪造（英语：Cross-site request forgery），通常缩写为 CSRF， 是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法</p>
<h2 id="ddos">DDOS</h2>
<p>DDOS 又称为分布式拒绝服务，全称是 Distributed Denial of Service。DDOS 本是利用合理的请求造成资源过载，导致服务不可用</p>
<h2 id="oop-2">OOP</h2>
<p>面向对象程序设计（英语：Object-oriented programming，缩写：OOP）是种具有对象概念的程序编程典范，同时也是一种程序开发的抽象方针</p>
<h2 id="sso">SSO</h2>
<p>单点登录（英语：Single sign-on，缩写为 SSO），又译为单一签入，一种对于许多相互关连，但是又是各自独立的软件系统，提供访问控制的属性。当拥有这项属性时，当用户登录时，就可以获取所有系统的访问权限，不用对每个单一系统都逐一登录</p>
<h2 id="rest">REST</h2>
<p>表现层状态转换（英语：Representational State Transfer，缩写：REST）是一种万维网软件架构风格，目的是便于不同软件/程序在网络（例如互联网）中互相传递信息</p>
<h2 id="jwt">JWT</h2>
<p>JSON Web Token 是一种跨域认证解决方案</p>
<h2 id="lvs">LVS</h2>
<p>Linux 虚拟服务器（Linux Virtual Server，LVS）是一个虚拟的服务器集群系统，用于实现负载均衡</p>
<p>以上内容均摘录自维基百科、百度百科</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[PHP 5 String 函数]]></title>
        <id>https://imcm.xyz/php-5-array/</id>
        <link href="https://imcm.xyz/php-5-array/">
        </link>
        <updated>2020-09-10T03:10:45.000Z</updated>
        <summary type="html"><![CDATA[<p>PHP String 函数是 PHP 核心的组成部分。无需安装即可使用这些函数。</p>
]]></summary>
        <content type="html"><![CDATA[<p>PHP String 函数是 PHP 核心的组成部分。无需安装即可使用这些函数。</p>
<!-- more -->
<table>
<thead>
<tr>
<th>函数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>addcslashes()</td>
<td>返回在指定的字符前添加反斜杠的字符串。</td>
</tr>
<tr>
<td>addslashes()</td>
<td>返回在预定义的字符前添加反斜杠的字符串。</td>
</tr>
<tr>
<td>bin2hex()</td>
<td>把 ASCII 字符的字符串转换为十六进制值。</td>
</tr>
<tr>
<td>chop()</td>
<td>移除字符串右侧的空白字符或其他字符。</td>
</tr>
<tr>
<td>chr()</td>
<td>从指定 ASCII 值返回字符。</td>
</tr>
<tr>
<td>chunk_split()</td>
<td>把字符串分割为一连串更小的部分。</td>
</tr>
<tr>
<td>convert_cyr_string()</td>
<td>把字符串由一种 Cyrillic 字符集转换成另一种。</td>
</tr>
<tr>
<td>convert_uudecode()</td>
<td>对 uuencode 编码的字符串进行解码。</td>
</tr>
<tr>
<td>convert_uuencode()</td>
<td>使用 uuencode 算法对字符串进行编码。</td>
</tr>
<tr>
<td>count_chars()</td>
<td>返回字符串所用字符的信息。</td>
</tr>
<tr>
<td>crc32()</td>
<td>计算一个字符串的 32 位 CRC（循环冗余校验）。</td>
</tr>
<tr>
<td>crypt()</td>
<td>单向的字符串加密法（hashing）。</td>
</tr>
<tr>
<td>echo()</td>
<td>输出一个或多个字符串。</td>
</tr>
<tr>
<td>explode()</td>
<td>把字符串打散为数组。</td>
</tr>
<tr>
<td>fprintf()</td>
<td>把格式化的字符串写入到指定的输出流。</td>
</tr>
<tr>
<td>get_html_translation_table()</td>
<td>返回 htmlspecialchars() 和 htmlentities() 使用的翻译表。</td>
</tr>
<tr>
<td>hebrev()</td>
<td>把希伯来（Hebrew）文本转换为可见文本。</td>
</tr>
<tr>
<td>hebrevc()</td>
<td>把希伯来（Hebrew）文本转换为可见文本，并把新行（\n）转换为 <br>。</td>
</tr>
<tr>
<td>hex2bin()</td>
<td>把十六进制值的字符串转换为 ASCII 字符。</td>
</tr>
<tr>
<td>html_entity_decode()</td>
<td>把 HTML 实体转换为字符。</td>
</tr>
<tr>
<td>htmlentities()</td>
<td>把字符转换为 HTML 实体。</td>
</tr>
<tr>
<td>htmlspecialchars_decode()</td>
<td>把一些预定义的 HTML 实体转换为字符。</td>
</tr>
<tr>
<td>htmlspecialchars()</td>
<td>把一些预定义的字符转换为 HTML 实体。</td>
</tr>
<tr>
<td>implode()</td>
<td>返回一个由数组元素组合成的字符串。</td>
</tr>
<tr>
<td>join()</td>
<td>implode() 的别名。</td>
</tr>
<tr>
<td>lcfirst()</td>
<td>把字符串中的首字符转换为小写。</td>
</tr>
<tr>
<td>levenshtein()</td>
<td>返回两个字符串之间的 Levenshtein 距离。</td>
</tr>
<tr>
<td>localeconv()</td>
<td>返回本地数字及货币格式信息。</td>
</tr>
<tr>
<td>ltrim()</td>
<td>移除字符串左侧的空白字符或其他字符。</td>
</tr>
<tr>
<td>md5()</td>
<td>计算字符串的 MD5 散列。</td>
</tr>
<tr>
<td>md5_file()</td>
<td>计算文件的 MD5 散列。</td>
</tr>
<tr>
<td>metaphone()</td>
<td>计算字符串的 metaphone 键。</td>
</tr>
<tr>
<td>money_format()</td>
<td>返回格式化为货币字符串的字符串。</td>
</tr>
<tr>
<td>nl_langinfo()</td>
<td>返回指定的本地信息。</td>
</tr>
<tr>
<td>nl2br()</td>
<td>在字符串中的每个新行之前插入 HTML 换行符。</td>
</tr>
<tr>
<td>number_format()</td>
<td>通过千位分组来格式化数字。</td>
</tr>
<tr>
<td>ord()</td>
<td>返回字符串中第一个字符的 ASCII 值。</td>
</tr>
<tr>
<td>parse_str()</td>
<td>把查询字符串解析到变量中。</td>
</tr>
<tr>
<td>print()</td>
<td>输出一个或多个字符串。</td>
</tr>
<tr>
<td>printf()</td>
<td>输出格式化的字符串。</td>
</tr>
<tr>
<td>quoted_printable_decode()</td>
<td>把 quoted-printable 字符串转换为 8 位字符串。</td>
</tr>
<tr>
<td>quoted_printable_encode()</td>
<td>把 8 位字符串转换为 quoted-printable 字符串。</td>
</tr>
<tr>
<td>quotemeta()</td>
<td>引用元字符。</td>
</tr>
<tr>
<td>rtrim()</td>
<td>移除字符串右侧的空白字符或其他字符。</td>
</tr>
<tr>
<td>setlocale()</td>
<td>设置地区信息（地域信息）。</td>
</tr>
<tr>
<td>sha1()</td>
<td>计算字符串的 SHA-1 散列。</td>
</tr>
<tr>
<td>sha1_file()</td>
<td>计算文件的 SHA-1 散列。</td>
</tr>
<tr>
<td>similar_text()</td>
<td>计算两个字符串的相似度。</td>
</tr>
<tr>
<td>soundex()</td>
<td>计算字符串的 soundex 键。</td>
</tr>
<tr>
<td>sprintf()</td>
<td>把格式化的字符串写入一个变量中。</td>
</tr>
<tr>
<td>sscanf()</td>
<td>根据指定的格式解析来自一个字符串的输入。</td>
</tr>
<tr>
<td>str_getcsv()</td>
<td>把 CSV 字符串解析到数组中。</td>
</tr>
<tr>
<td>str_ireplace()</td>
<td>替换字符串中的一些字符（大小写不敏感）。</td>
</tr>
<tr>
<td>str_pad()</td>
<td>把字符串填充为新的长度。</td>
</tr>
<tr>
<td>str_repeat()</td>
<td>把字符串重复指定的次数。</td>
</tr>
<tr>
<td>str_replace()</td>
<td>替换字符串中的一些字符（大小写敏感）。</td>
</tr>
<tr>
<td>str_rot13()</td>
<td>对字符串执行 ROT13 编码。</td>
</tr>
<tr>
<td>str_shuffle()</td>
<td>随机地打乱字符串中的所有字符。</td>
</tr>
<tr>
<td>str_split()</td>
<td>把字符串分割到数组中。</td>
</tr>
<tr>
<td>str_word_count()</td>
<td>计算字符串中的单词数。</td>
</tr>
<tr>
<td>strcasecmp()</td>
<td>比较两个字符串（大小写不敏感）。</td>
</tr>
<tr>
<td>strchr()</td>
<td>查找字符串在另一字符串中的第一次出现。（strstr() 的别名。）</td>
</tr>
<tr>
<td>strcmp()</td>
<td>比较两个字符串（大小写敏感）。</td>
</tr>
<tr>
<td>strcoll()</td>
<td>比较两个字符串（根据本地设置）。</td>
</tr>
<tr>
<td>strcspn()</td>
<td>返回在找到任何指定的字符之前，在字符串查找的字符数。</td>
</tr>
<tr>
<td>strip_tags()</td>
<td>剥去字符串中的 HTML 和 PHP 标签。</td>
</tr>
<tr>
<td>stripcslashes()</td>
<td>删除由 addcslashes() 函数添加的反斜杠。</td>
</tr>
<tr>
<td>stripslashes()</td>
<td>删除由 addslashes() 函数添加的反斜杠。</td>
</tr>
<tr>
<td>stripos()</td>
<td>返回字符串在另一字符串中第一次出现的位置（大小写不敏感）。</td>
</tr>
<tr>
<td>stristr()</td>
<td>查找字符串在另一字符串中第一次出现的位置（大小写不敏感）。</td>
</tr>
<tr>
<td>strlen()</td>
<td>返回字符串的长度。中文字符串的处理使用 mb_strlen() 函数。</td>
</tr>
<tr>
<td>strnatcasecmp()</td>
<td>使用一种&quot;自然排序&quot;算法来比较两个字符串（大小写不敏感）。</td>
</tr>
<tr>
<td>strnatcmp()</td>
<td>使用一种&quot;自然排序&quot;算法来比较两个字符串（大小写敏感）。</td>
</tr>
<tr>
<td>strncasecmp()</td>
<td>前 n 个字符的字符串比较（大小写不敏感）。</td>
</tr>
<tr>
<td>strncmp()</td>
<td>前 n 个字符的字符串比较（大小写敏感）。</td>
</tr>
<tr>
<td>strpbrk()</td>
<td>在字符串中搜索指定字符中的任意一个。</td>
</tr>
<tr>
<td>strpos()</td>
<td>返回字符串在另一字符串中第一次出现的位置（大小写敏感）。</td>
</tr>
<tr>
<td>strrchr()</td>
<td>查找字符串在另一个字符串中最后一次出现。</td>
</tr>
<tr>
<td>strrev()</td>
<td>反转字符串。</td>
</tr>
<tr>
<td>strripos()</td>
<td>查找字符串在另一字符串中最后一次出现的位置(大小写不敏感)。</td>
</tr>
<tr>
<td>strrpos()</td>
<td>查找字符串在另一字符串中最后一次出现的位置(大小写敏感)。</td>
</tr>
<tr>
<td>strspn()</td>
<td>返回在字符串中包含的特定字符的数目。</td>
</tr>
<tr>
<td>strstr()</td>
<td>查找字符串在另一字符串中的第一次出现（大小写敏感）。</td>
</tr>
<tr>
<td>strtok()</td>
<td>把字符串分割为更小的字符串。</td>
</tr>
<tr>
<td>strtolower()</td>
<td>把字符串转换为小写字母。</td>
</tr>
<tr>
<td>strtoupper()</td>
<td>把字符串转换为大写字母。</td>
</tr>
<tr>
<td>strtr()</td>
<td>转换字符串中特定的字符。</td>
</tr>
<tr>
<td>substr()</td>
<td>返回字符串的一部分。</td>
</tr>
<tr>
<td>mb_substr()</td>
<td>返回中文字符串的一部分。</td>
</tr>
<tr>
<td>substr_compare()</td>
<td>从指定的开始位置（二进制安全和选择性区分大小写）比较两个字符串。</td>
</tr>
<tr>
<td>substr_count()</td>
<td>计算子串在字符串中出现的次数。</td>
</tr>
<tr>
<td>substr_replace()</td>
<td>把字符串的一部分替换为另一个字符串。</td>
</tr>
<tr>
<td>trim()</td>
<td>移除字符串两侧的空白字符和其他字符。</td>
</tr>
<tr>
<td>ucfirst()</td>
<td>把字符串中的首字符转换为大写。</td>
</tr>
<tr>
<td>ucwords()</td>
<td>把字符串中每个单词的首字符转换为大写。</td>
</tr>
<tr>
<td>vfprintf()</td>
<td>把格式化的字符串写到指定的输出流。</td>
</tr>
<tr>
<td>vprintf()</td>
<td>输出格式化的字符串。</td>
</tr>
<tr>
<td>vsprintf()</td>
<td>把格式化字符串写入变量中。</td>
</tr>
<tr>
<td>wordwrap()</td>
<td>按照指定长度对字符串进行折行处理。</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux/Mac下统计当前文件夹下的文件个数、目录个数]]></title>
        <id>https://imcm.xyz/linuxmac-list-fields/</id>
        <link href="https://imcm.xyz/linuxmac-list-fields/">
        </link>
        <updated>2020-08-31T13:09:40.000Z</updated>
        <summary type="html"><![CDATA[<p>这篇文章主要介绍了Linux下统计当前文件夹下的文件个数、目录个数,本文使用ls命令配合管理、grep命令实现统计需求</p>
]]></summary>
        <content type="html"><![CDATA[<p>这篇文章主要介绍了Linux下统计当前文件夹下的文件个数、目录个数,本文使用ls命令配合管理、grep命令实现统计需求</p>
<!-- more -->
<h3 id="1-统计当前文件夹下文件的个数">1. 统计当前文件夹下文件的个数</h3>
<pre><code class="language-shell">ls -l |grep &quot;^-&quot;|wc -l
</code></pre>
<h3 id="2-统计当前文件夹下目录的个数">2.  统计当前文件夹下目录的个数</h3>
<pre><code class="language-shell">ls -l |grep &quot;^d&quot;|wc -l
</code></pre>
<h3 id="3-统计当前文件夹下文件的个数包括子文件夹里的">3. 统计当前文件夹下文件的个数，包括子文件夹里的</h3>
<pre><code class="language-shell">ls -lR|grep &quot;^-&quot;|wc -l
</code></pre>
<h3 id="4-统计文件夹下目录的个数包括子文件夹里的">4. 统计文件夹下目录的个数，包括子文件夹里的</h3>
<pre><code class="language-shell">ls -lR|grep &quot;^d&quot;|wc -l
</code></pre>
<h3 id="5-说明">5. 说明</h3>
<ul>
<li>代码如下:</li>
</ul>
<pre><code class="language-shell">ls -l
</code></pre>
<p>长列表输出当前文件夹下文件信息(注意这里的文件，不同于一般的文件，可能是目录、链接、设备文件等)</p>
<ul>
<li>代码如下:</li>
</ul>
<pre><code class="language-shell">grep &quot;^-&quot;
</code></pre>
<p>这里将长列表输出信息过滤一部分，只保留一般文件，如果只保留目录就是 ^d</p>
<ul>
<li>代码如下:</li>
</ul>
<pre><code class="language-shell">wc -l
</code></pre>
<p>统计输出信息的行数，因为已经过滤得只剩一般文件了，所以统计结果就是一般文件信息的行数，又由于一行信息对应一个文件，所以也就是文件的个数。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker CE 镜像源]]></title>
        <id>https://imcm.xyz/docker-pi/</id>
        <link href="https://imcm.xyz/docker-pi/">
        </link>
        <updated>2020-08-28T14:46:12.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="1-使用官方安装脚本自动安装-仅适用于公网环境">1. 使用官方安装脚本自动安装 （仅适用于公网环境）</h3>
]]></summary>
        <content type="html"><![CDATA[<h3 id="1-使用官方安装脚本自动安装-仅适用于公网环境">1. 使用官方安装脚本自动安装 （仅适用于公网环境）</h3>
<!-- more -->
<pre><code class="language-shell">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun
</code></pre>
<h3 id="2-手动安装帮助-阿里云ecs可以通过内网安装见注释部分内容">2. 手动安装帮助 (阿里云ECS可以通过内网安装，见注释部分内容)</h3>
<h4 id="ubuntu-1404-1604-使用apt-get进行安装">Ubuntu 14.04 16.04 (使用apt-get进行安装)</h4>
<pre><code class="language-shell"># step 1: 安装必要的一些系统工具
sudo apt-get update
sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common
# step 2: 安装GPG证书
curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -
# Step 3: 写入软件源信息
sudo add-apt-repository &quot;deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable&quot;
# Step 4: 更新并安装 Docker-CE
sudo apt-get -y update
sudo apt-get -y install docker-ce

注意：其他注意事项在下面的注释中
# 安装指定版本的Docker-CE:
# Step 1: 查找Docker-CE的版本:
# apt-cache madison docker-ce
#   docker-ce | 17.03.1~ce-0~ubuntu-xenial | http://mirrors.aliyun.com/docker-ce/linux/ubuntu xenial/stable amd64 Packages
#   docker-ce | 17.03.0~ce-0~ubuntu-xenial | http://mirrors.aliyun.com/docker-ce/linux/ubuntu xenial/stable amd64 Packages
# Step 2: 安装指定版本的Docker-CE: (VERSION 例如上面的 17.03.1~ce-0~ubuntu-xenial)
# sudo apt-get -y install docker-ce=[VERSION]

# 通过经典网络、VPC网络内网安装时，用以下命令替换Step 2、Step 3中的命令
# 经典网络：
# curl -fsSL http://mirrors.aliyuncs.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -
# sudo add-apt-repository &quot;deb [arch=amd64] http://mirrors.aliyuncs.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable&quot;
# VPC网络：
# curl -fsSL http://mirrors.cloud.aliyuncs.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -
# sudo add-apt-repository &quot;deb [arch=amd64] http://mirrors.cloud.aliyuncs.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable&quot;
</code></pre>
<h4 id="centos-7-使用yum进行安装">CentOS 7 (使用yum进行安装)</h4>
<pre><code class="language-shell"># step 1: 安装必要的一些系统工具
sudo yum install -y yum-utils device-mapper-persistent-data lvm2
# Step 2: 添加软件源信息
sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
# Step 3: 更新并安装 Docker-CE
sudo yum makecache fast
sudo yum -y install docker-ce
# Step 4: 开启Docker服务
sudo service docker start

注意：其他注意事项在下面的注释中
# 官方软件源默认启用了最新的软件，您可以通过编辑软件源的方式获取各个版本的软件包。例如官方并没有将测试版本的软件源置为可用，你可以通过以下方式开启。同理可以开启各种测试版本等。
# vim /etc/yum.repos.d/docker-ce.repo
#   将 [docker-ce-test] 下方的 enabled=0 修改为 enabled=1
#
# 安装指定版本的Docker-CE:
# Step 1: 查找Docker-CE的版本:
# yum list docker-ce.x86_64 --showduplicates | sort -r
#   Loading mirror speeds from cached hostfile
#   Loaded plugins: branch, fastestmirror, langpacks
#   docker-ce.x86_64            17.03.1.ce-1.el7.centos            docker-ce-stable
#   docker-ce.x86_64            17.03.1.ce-1.el7.centos            @docker-ce-stable
#   docker-ce.x86_64            17.03.0.ce-1.el7.centos            docker-ce-stable
#   Available Packages
# Step2 : 安装指定版本的Docker-CE: (VERSION 例如上面的 17.03.0.ce.1-1.el7.centos)
# sudo yum -y install docker-ce-[VERSION]
# 注意：在某些版本之后，docker-ce安装出现了其他依赖包，如果安装失败的话请关注错误信息。例如 docker-ce 17.03 之后，需要先安装 docker-ce-selinux。
# yum list docker-ce-selinux- --showduplicates | sort -r
# sudo yum -y install docker-ce-selinux-[VERSION]

# 通过经典网络、VPC网络内网安装时，用以下命令替换Step 2中的命令
# 经典网络：
# sudo yum-config-manager --add-repo http://mirrors.aliyuncs.com/docker-ce/linux/centos/docker-ce.repo
# VPC网络：
# sudo yum-config-manager --add-repo http://mirrors.could.aliyuncs.com/docker-ce/linux/centos/docker-ce.repo
</code></pre>
<h3 id="安装校验">安装校验</h3>
<pre><code class="language-shell">root@iZbp12adskpuoxodbkqzjfZ:$ docker version
Client:
 Version:      17.03.0-ce
 API version:  1.26
 Go version:   go1.7.5
 Git commit:   3a232c8
 Built:        Tue Feb 28 07:52:04 2017
 OS/Arch:      linux/amd64

Server:
 Version:      17.03.0-ce
 API version:  1.26 (minimum version 1.12)
 Go version:   go1.7.5
 Git commit:   3a232c8
 Built:        Tue Feb 28 07:52:04 2017
 OS/Arch:      linux/amd64
 Experimental: false
</code></pre>
<h3 id="常用命令">常用命令</h3>
<pre><code class="language-shell">#查看 Docker 版本
docker -v
sudo docker pull 仓库/镜像:版本（留空的话默认为 latest）
sudo docker run 加参数，用来创建容器
#查看运行容器
sudo docker ps
#查看所有下载的镜像
sudo docker images
#进入容器终端
sudo docker exec -i -t ha /bin/bash
#实时查看10行的 ha 日志
sudo docker logs -f -t --tail 10 ha
#重启 systemctl 守护进程
sudo systemctl daemon-reload
#设置 Docker 开机启动
sudo systemctl enable docker
#开启 Docker 服务
sudo systemctl start docker

#下载 Docker 图形化界面 portainer
sudo docker pull portainer/portainer
#创建 portainer 容器
sudo docker volume create portainer_data
#运行 portainer
sudo docker run -d -p 9000:9000 --name portainer --restart always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer
</code></pre>
<h3 id="参考资料">参考资料</h3>
<p>其他关于旧版本Docker卸载以及测试开发版本Docker安装的帮助，可以参考官方文档的说明进行安装</p>
<p><a href="https://docs.docker.com/engine/installation/linux/docker-ce/centos/?spm=a2c6h.12873639.0.0.1aba47efpIg1xo">CentOS帮助链接</a><br>
<a href="https://docs.docker.com/engine/installation/linux/docker-ce/ubuntu/?spm=a2c6h.12873639.0.0.1aba47efpIg1xo">Ubuntu帮助链接</a><br>
<a href="https://docs.docker.com/engine/installation/linux/docker-ce/debian/?spm=a2c6h.12873639.0.0.1aba47efpIg1xo">Debian帮助链接</a><br>
<a href="https://docs.docker.com/engine/installation/linux/docker-ce/fedora/?spm=a2c6h.12873639.0.0.1aba47efpIg1xo">Fedora帮助链接</a></p>
<p>转自：<a href="https://developer.aliyun.com/article/110806">阿里云开发社区</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[腾讯视频自动签到获得V力值]]></title>
        <id>https://imcm.xyz/qcloud-v/</id>
        <link href="https://imcm.xyz/qcloud-v/">
        </link>
        <updated>2020-08-16T15:27:47.000Z</updated>
        <summary type="html"><![CDATA[<p>本教程需要用到腾讯云的云函数SCF。没有腾讯云账户的请先申请账户，注册<a href="https://cloud.tencent.com/act/cps/redirect-all?redirect=10135&amp;opc_hash_key=XG7JfqCPIb8b1609">腾讯云</a>。</p>
]]></summary>
        <content type="html"><![CDATA[<p>本教程需要用到腾讯云的云函数SCF。没有腾讯云账户的请先申请账户，注册<a href="https://cloud.tencent.com/act/cps/redirect-all?redirect=10135&amp;opc_hash_key=XG7JfqCPIb8b1609">腾讯云</a>。</p>
<!-- more -->
<h3 id="1-浏览器打开腾讯视频官网">1. 浏览器打开腾讯视频官网：</h3>
<p>https://v.qq.com/<br>
登录VIP账号</p>
<h3 id="2-vip账号登录成功后打开另一个地址">2. VIP账号登录成功后，打开另一个地址：</h3>
<p>https://vip.video.qq.com/fcgi-bin/comm_cgi?name=hierarchical_task_system&amp;cmd=2<br>
（没错这个就是签到地址。APP抓出来的。）</p>
<h3 id="3-在第二个地址按下快捷键ctrlshiftj">3. 在第二个地址，按下快捷键：CTRL+SHIFT+J</h3>
<p>在&gt;后面输入：</p>
<pre><code>document.cookie
</code></pre>
<p>回车，复制【引号里】的内容（脚本要用的cookies）：</p>
<p>用qq或者微信登录<a href="https://console.cloud.tencent.com/scf">腾讯云scf</a>(无服务器云函数)</p>
<p>函数服务=》（选择区域，上海，广州，成都，香港，北京）<br>
=》新建=》空白函数=》函数名称（随便写，比如txsp_qiandao）=》运行环境（python3.6）=》下一步</p>
<p>复制下面代码：</p>
<pre><code class="language-python"># -*- coding: utf8 -*-
 
import requests
import re
import time
from urllib.parse import quote
 
def start():
    try:
        s = requests.session()
 
        cookie1 = 'TXSP_COOKIE'
 
        this_time = int(round(time.time() * 1000))
 
        login_url = 'https://vip.video.qq.com/fcgi-bin/comm_cgi?name=hierarchical_task_system&amp;cmd=2&amp;_=' + str(this_time)
 
        headers={
            'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.204 Safari/537.36',
            'Cookie': cookie1
        }
 
        res =s.get(login_url,headers=headers).text
 
        print('访问结果：'+res)
 
        if 'Account Verify Error' in res:
            print('cookies失效，通知SERVER酱！')
            requests.get('https://sc.ftqq.com/SCKEY.send?text=' + quote('腾讯视频自动签到失败~'+time.strftime('%Y.%m.%d',time.localtime(time.time()))) +'&amp;desp='+quote('cookies失效，请更新！\n'))
        else:
            print('签到完成')
 
    except Exception as e:
        print(&quot;地址访问失败，通知SERVER酱！&quot;)
        requests.get('https://sc.ftqq.com/SCKEY.send?text=' + quote('腾讯视频自动签到失败~'+time.strftime('%Y.%m.%d',time.localtime(time.time()))) +'&amp;desp='+quote('异常代码：\n'+str(e)))
 
 
def main_handler(event, context):
    return start()
 
 
if __name__ == '__main__':
    start()
</code></pre>
<p>代码需要修改的地方3处，</p>
<ul>
<li>TXSP_COOKIE （一处，刚才获取的cookies字符串）</li>
<li>https://sc.ftqq.com/XXXX.send （两处，server酱的地址，申请地址：http://sc.ftqq.com/）</li>
</ul>
<p>完成。</p>
<h3 id="4-触发方式定时触发-名称txsp_timer-自定义触发周期0-0-3-保存">4. 触发方式=》定时触发 / 名称：txsp_timer / 自定义触发周期（0 0 3 * * * *）保存</h3>
<h3 id="5-函数代码测试如果日志显示checkin_score-5这个5就是获得的v力值签到过也会有中文提示">5. 函数代码=》测试（如果日志显示”checkin_score”: 5，这个5就是获得的V力值，签到过也会有中文提示）</h3>
<h3 id="其他说明">其他说明</h3>
<h4 id="1-如果日志里提示">1. 如果日志里提示：</h4>
<p>{“msg”:”Account Verify Error”,”ret”:-10006}说明COOKIES获取错误。</p>
<h4 id="2-cookie能用多久还不知道反正我挂了40多天了-验证失败了也会微信通知更新下cookies就行">2. COOKIE能用多久还不知道，，反正我挂了40多天了。。。验证失败了，也会微信通知，更新下COOKIES就行。</h4>
<h4 id="3签到分数不保证-现在大多是10分左右偶尔50分-这个腾讯的锅~就当腾讯云函数来背吧~">3.签到分数不保证。。现在大多是10分左右，偶尔50分+。。。这个腾讯的锅~<s>就当腾讯云函数来背吧</s>~</h4>
<p>来源(Source)：<a href="https://lsdlhlx.top/2019/10/%E8%85%BE%E8%AE%AF%E8%A7%86%E9%A2%91%E8%87%AA%E5%8A%A8%E7%AD%BE%E5%88%B0%E8%8E%B7%E5%BE%97v%E5%8A%9B%E5%80%BC/">西瓜小窝</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ECMAScript 2015～2020 语法思维导图]]></title>
        <id>https://imcm.xyz/ecmascript/</id>
        <link href="https://imcm.xyz/ecmascript/">
        </link>
        <updated>2020-08-14T11:52:34.000Z</updated>
        <summary type="html"><![CDATA[<p>ECMAScript 2015～2020 思维导图</p>
]]></summary>
        <content type="html"><![CDATA[<p>ECMAScript 2015～2020 思维导图</p>
<!-- more -->
<p><img src="https://imcm.xyz/post-images/1597377198390.jpg" alt="" loading="lazy"><br>
<img src="https://imcm.xyz/post-images/1597377288128.jpg" alt="" loading="lazy"></p>
<p>转自：<a href="http://es.xiecheng.live/">XieCheng</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[LinuxVPS 自建ZeroTier 的MOON根目录服务器]]></title>
        <id>https://imcm.xyz/linux-zerotier-moon/</id>
        <link href="https://imcm.xyz/linux-zerotier-moon/">
        </link>
        <updated>2020-08-12T12:20:39.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="说明">说明</h3>
<p>zerotier 可以作为一款 p2p 的 vlan 内网穿透工具，功能强大且易用，同类产品还有 frp和 LanProxy等。最近有个朋友有创建 p2p vlan 的需求，在简单调研之后决定使用 zerotier 作为基础工具。</p>
]]></summary>
        <content type="html"><![CDATA[<h3 id="说明">说明</h3>
<p>zerotier 可以作为一款 p2p 的 vlan 内网穿透工具，功能强大且易用，同类产品还有 frp和 LanProxy等。最近有个朋友有创建 p2p vlan 的需求，在简单调研之后决定使用 zerotier 作为基础工具。</p>
<!-- more -->
<p>官方给出的使用方案比较简单。首先需要一个中心的节点用于两个内网节点的握手，该中心节点需要有一个公网 IP。zerotier 官网提供了中心节点相关服务，免费账户有一定的使用限制，但是由于其节点位于国外，延迟比较高，且可能还需要科学上网才能使用。除此之外，zerotier 也支持自己搭建中心节点服务器，也叫做 MOON 服务器。下面是它的搭建步骤。</p>
<h3 id="moon-服务器配置">MOON 服务器配置</h3>
<p>操作系统版本是 <code>Ubuntu 18.04, Zerotier One</code> 版本是 <code>v1.2.10</code>, 公网 (也就是 MOON 服务器) 地址是 1.1.1.1。</p>
<h4 id="1-通过官网文档根据不同操作系统选择不同的安装方式这里直接通过命令行安装">1. 通过<a href="https://www.zerotier.com/">官网</a>文档根据不同操作系统选择不同的安装方式，这里直接通过命令行安装</h4>
<pre><code class="language-shell">curl -s 'https://pgp.mit.edu/pks/lookup?op=get&amp;search=0x1657198823E52A61' | gpg --import &amp;&amp; \ if z=(curl -s 'https://install.zerotier.com/' | gpg); then echo &quot;z&quot; | sudo bash; fi
</code></pre>
<p>如果上述命令运行失败，那么使用下面命令(建议用这个)</p>
<pre><code class="language-shell">curl -s https://install.zerotier.com/ | sudo bash
</code></pre>
<h4 id="2-将-moon-服务器加入-zerotier-局域网">2. 将 MOON 服务器加入 Zerotier 局域网</h4>
<p>虽然搭建了 MOON 服务器，我们还是需要借助 <a href="https://my.zerotier.com/network">zerotier network</a>，也就是需要先通过 zerotier 官网创建一个 network，并且内网节点需要使用 <code>join</code> 命令加入该网络才能实现内网节点的互通，换句话说 MOON 节点只起到了加速的作用，虚拟网络的分配和管理还是需要 zerotier 服务端参与。</p>
<pre><code class="language-shell">zerotier-cli join &lt;network id&gt;
</code></pre>
<h4 id="3-生成配置文件">3. 生成配置文件</h4>
<pre><code class="language-shell">sudo chmod 777 /var/lib/zerotier-one # 这里为了有写入文件的权限
cd /var/lib/zerotier-one
sudo zerotier-idtool initmoon identity.public &gt; moon.json
</code></pre>
<h4 id="4-修改配置文件-moonjson主要是添加公网-ip修改内容如下9993-是默认端口">4. 修改配置文件 <code>moon.json</code>，主要是添加公网 IP，修改内容如下，<code>9993</code> 是默认端口</h4>
<pre><code class="language-shell">&quot;stableEndpoints&quot;: [ &quot;1.1.1.1/9993&quot; ] #修改为VPS公网IP/9993
</code></pre>
<p>还需要注意 <code>moon.json</code> 中的 id 值，它是 MOON 服务器的 ID，是一个 10 位的字符串，我的为 <code>efe9e9a259</code>，也可以用 <code>sudo zerotier-cli info</code> 查看，后面会用到。</p>
<h4 id="5-生成-moon-文件">5. 生成 moon 文件</h4>
<pre><code class="language-shell">sudo zerotier-idtool genmoon moon.json
</code></pre>
<h4 id="6-在-varlibzerotier-one-目录下新建-moonsd-文件夹中并将生成的-moon-文件放到该文件夹下我的-moon-文件名为-000000efe9e9a259moon">6. 在 <code>/var/lib/zerotier-one</code> 目录下新建 <code>moons.d</code> 文件夹中，并将生成的 moon 文件放到该文件夹下，我的 moon 文件名为 <code>000000efe9e9a259.moon</code></h4>
<pre><code class="language-shell">mv 000000efe9e9a259.moon moons.d/
</code></pre>
<h4 id="7-重启-zerotier-one">7. 重启 <code>zerotier-one</code></h4>
<pre><code class="language-shell">sudo systemctl restart zerotier-one.service
</code></pre>
<h3 id="内网节点配置本地设备">内网节点配置(本地设备)</h3>
<h4 id="1-在内网节点安装-zerotier安装方法和上面类似根据文档选择不同操作系统的方法进行安装即可-请参考文章zerotier-无公网-ip-实现内网穿透">1. 在内网节点安装 zerotier，安装方法和上面类似，根据<a href="https://www.moewah.com/go/aHR0cHM6Ly93d3cuemVyb3RpZXIuY29tL2Rvd25sb2FkLnNodG1s">文档</a>选择不同操作系统的方法进行安装即可。请参考文章<a href="https://www.moewah.com/archives/1474.html">《ZeroTier 无公网 IP 实现内网穿透》</a></h4>
<h4 id="2-将-moon-节点添加到常规节点">2. 将 MOON 节点添加到常规节点</h4>
<pre><code class="language-shell">sudo zerotier-cli orbit efe9e9a259 efe9e9a259 # 注意这里是两次根节点的ID
</code></pre>
<p>如果没返回 <code>200 orbit OK</code> 的话，需要手动拷贝生成的 moon 文件 <code>000000efe9e9a259.moon</code> 文件到常规节点的机器上，位置如下:</p>
<pre><code>Windows: C:\ProgramData\ZeroTier\One
Macintosh: /Library/Application Support/ZeroTier/One (在 Terminal 中应为 /Library/Application\ Support/ZeroTier/One)
Linux: /var/lib/zerotier-one
FreeBSD/OpenBSD: /var/db/zerotier-one
</code></pre>
<h4 id="3-然后重启-zerotier-one">3. 然后重启 zerotier-one</h4>
<p>查看节点列表，出现根服务器的 MOON 节点表示成功</p>
<pre><code class="language-shell"> ~ sudo zerotier-cli listpeers
200 listpeers     
200 listpeers 3dfa0fd16b - -1 - LEAF
200 listpeers 8841408a2e 45.32.248.87/9993;11749;11453 252 1.1.5 PLANET
200 listpeers 9d219039f3 128.199.197.217/9993;11749;11381 390 1.1.5 PLANET
200 listpeers abfd31bd47 178.128.240.145/35368;6238;14319 509 1.2.5 LEAF
200 listpeers efe9e9a259 1.1.1.1/9993;6238;1184 36 1.2.12 MOON
</code></pre>
<h4 id="4-我们再在内网节点上运行-ifconfigwindows-是-ipconfig可以看到-zerotier-vlan-分配给其的内网-ip">4. 我们再在内网节点上运行 ifconfig(windows 是 ipconfig)，可以看到 zerotier vlan 分配给其的内网 IP</h4>
<pre><code class="language-shell">zt0: flags=8843 metric 5000 mtu 2800
    ether 1a:42:9a:39:7d:3f
    inet 10.147.18.127 netmask 0xffffff00 broadcast 10.147.18.255
    inet6 fe80::1842:9aff:fe39:7d3f%zt0 prefixlen 64 scopeid 0xc
    inet6 fcec:2f1a:a769:487e:c00e::1 prefixlen 40
    nd6 options=201
    media: autoselect
    status: active
    open (pid 84214)
</code></pre>
<p>这里的 <code>10.147.18.127</code>就是其虚拟局域网的 IP，在另外一个局域网中通过上述过程配置另外一个节点，它的虚拟局域网 IP 为 <code>10.147.18.30</code>，两个节点通过 <code>ping</code> 可以互相通</p>
<p>转自：<a href="https://opt.gs/posts/56602/">vps侦探</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Facade 类参考]]></title>
        <id>https://imcm.xyz/laravel-facades/</id>
        <link href="https://imcm.xyz/laravel-facades/">
        </link>
        <updated>2020-07-22T10:15:04.000Z</updated>
        <summary type="html"><![CDATA[<p>这是一个查找给定 Facade 类 API 文档的工具。</p>
]]></summary>
        <content type="html"><![CDATA[<p>这是一个查找给定 Facade 类 API 文档的工具。</p>
<!-- more -->
<table>
<thead>
<tr>
<th>Facade</th>
<th>类</th>
<th>服务容器绑定</th>
</tr>
</thead>
<tbody>
<tr>
<td>App</td>
<td><a href="https://laravel.com/api/%7B%7Bversion%7D%7D/Illuminate/Foundation/Application.html">Illuminate\Foundation\Application</a></td>
<td><code>app</code></td>
</tr>
<tr>
<td>Artisan</td>
<td><a href="https://laravel.com/api/%7B%7Bversion%7D%7D/Illuminate/Contracts/Console/Kernel.html">Illuminate\Contracts\Console\Kernel</a></td>
<td><code>artisan</code></td>
</tr>
<tr>
<td>Auth</td>
<td><a href="https://laravel.com/api/%7B%7Bversion%7D%7D/Illuminate/Auth/AuthManager.html">Illuminate\Auth\AuthManager</a></td>
<td><code>auth</code></td>
</tr>
<tr>
<td>Auth (Instance)</td>
<td><a href="https://laravel.com/api/%7B%7Bversion%7D%7D/Illuminate/Contracts/Auth/Guard.html">Illuminate\Contracts\Auth\Guard</a></td>
<td><code>auth.driver</code></td>
</tr>
<tr>
<td>Blade</td>
<td><a href="https://laravel.com/api/%7B%7Bversion%7D%7D/Illuminate/View/Compilers/BladeCompiler.html">Illuminate\View\Compilers\BladeCompiler</a></td>
<td><code>blade.compiler</code></td>
</tr>
<tr>
<td>Broadcast</td>
<td><a href="https://laravel.com/api/%7B%7Bversion%7D%7D/Illuminate/Contracts/Broadcasting/Factory.html">Illuminate\Contracts\Broadcasting\Factory</a></td>
<td></td>
</tr>
<tr>
<td>Broadcast (Instance)</td>
<td><a href="https://laravel.com/api/%7B%7Bversion%7D%7D/Illuminate/Contracts/Broadcasting/Broadcaster.html">Illuminate\Contracts\Broadcasting\Broadcaster</a></td>
<td></td>
</tr>
<tr>
<td>Bus</td>
<td><a href="https://laravel.com/api/%7B%7Bversion%7D%7D/Illuminate/Contracts/Bus/Dispatcher.html">Illuminate\Contracts\Bus\Dispatcher</a></td>
<td></td>
</tr>
<tr>
<td>Cache</td>
<td><a href="https://laravel.com/api/%7B%7Bversion%7D%7D/Illuminate/Cache/CacheManager.html">Illuminate\Cache\CacheManager</a></td>
<td><code>cache</code></td>
</tr>
<tr>
<td>Cache (Instance)</td>
<td><a href="https://laravel.com/api/%7B%7Bversion%7D%7D/Illuminate/Cache/Repository.html">Illuminate\Cache\Repository</a></td>
<td><code>cache.store</code></td>
</tr>
<tr>
<td>Config</td>
<td><a href="https://laravel.com/api/%7B%7Bversion%7D%7D/Illuminate/Config/Repository.html">Illuminate\Config\Repository</a></td>
<td><code>config</code></td>
</tr>
<tr>
<td>Cookie</td>
<td><a href="https://laravel.com/api/%7B%7Bversion%7D%7D/Illuminate/Cookie/CookieJar.html">Illuminate\Cookie\CookieJar</a></td>
<td><code>cookie</code></td>
</tr>
<tr>
<td>Crypt</td>
<td><a href="https://laravel.com/api/%7B%7Bversion%7D%7D/Illuminate/Encryption/Encrypter.html">Illuminate\Encryption\Encrypter</a></td>
<td><code>encrypter</code></td>
</tr>
<tr>
<td>DB</td>
<td><a href="https://laravel.com/api/%7B%7Bversion%7D%7D/Illuminate/Database/DatabaseManager.html">Illuminate\Database\DatabaseManager</a></td>
<td><code>db</code></td>
</tr>
<tr>
<td>DB (Instance)</td>
<td><a href="https://laravel.com/api/%7B%7Bversion%7D%7D/Illuminate/Database/Connection.html">Illuminate\Database\Connection</a></td>
<td><code>db.connection</code></td>
</tr>
<tr>
<td>Event</td>
<td><a href="https://laravel.com/api/%7B%7Bversion%7D%7D/Illuminate/Events/Dispatcher.html">Illuminate\Events\Dispatcher</a></td>
<td><code>events</code></td>
</tr>
<tr>
<td>File</td>
<td><a href="https://laravel.com/api/%7B%7Bversion%7D%7D/Illuminate/Filesystem/Filesystem.html">Illuminate\Filesystem\Filesystem</a></td>
<td><code>files</code></td>
</tr>
<tr>
<td>Gate</td>
<td><a href="https://laravel.com/api/%7B%7Bversion%7D%7D/Illuminate/Contracts/Auth/Access/Gate.html">Illuminate\Contracts\Auth\Access\Gate</a></td>
<td></td>
</tr>
<tr>
<td>Hash</td>
<td><a href="https://laravel.com/api/%7B%7Bversion%7D%7D/Illuminate/Contracts/Hashing/Hasher.html">Illuminate\Contracts\Hashing\Hasher</a></td>
<td><code>hash</code></td>
</tr>
<tr>
<td>Lang</td>
<td><a href="https://laravel.com/api/%7B%7Bversion%7D%7D/Illuminate/Translation/Translator.html">Illuminate\Translation\Translator</a></td>
<td><code>translator</code></td>
</tr>
<tr>
<td>Log</td>
<td><a href="https://laravel.com/api/%7B%7Bversion%7D%7D/Illuminate/Log/Logger.html">Illuminate\Log\Logger</a></td>
<td><code>log</code></td>
</tr>
<tr>
<td>Mail</td>
<td><a href="https://laravel.com/api/%7B%7Bversion%7D%7D/Illuminate/Mail/Mailer.html">Illuminate\Mail\Mailer</a></td>
<td><code>mailer</code></td>
</tr>
<tr>
<td>Notification</td>
<td><a href="https://laravel.com/api/%7B%7Bversion%7D%7D/Illuminate/Notifications/ChannelManager.html">Illuminate\Notifications\ChannelManager</a></td>
<td></td>
</tr>
<tr>
<td>Password</td>
<td><a href="https://laravel.com/api/%7B%7Bversion%7D%7D/Illuminate/Auth/Passwords/PasswordBrokerManager.html">Illuminate\Auth\Passwords\PasswordBrokerManager</a></td>
<td><code>auth.password</code></td>
</tr>
<tr>
<td>Password (Instance)</td>
<td><a href="https://laravel.com/api/%7B%7Bversion%7D%7D/Illuminate/Auth/Passwords/PasswordBroker.html">Illuminate\Auth\Passwords\PasswordBroker</a></td>
<td><code>auth.password.broker</code></td>
</tr>
<tr>
<td>Queue</td>
<td><a href="https://laravel.com/api/%7B%7Bversion%7D%7D/Illuminate/Queue/QueueManager.html">Illuminate\Queue\QueueManager</a></td>
<td><code>queue</code></td>
</tr>
<tr>
<td>Queue (Instance)</td>
<td><a href="https://laravel.com/api/%7B%7Bversion%7D%7D/Illuminate/Contracts/Queue/Queue.html">Illuminate\Contracts\Queue\Queue</a></td>
<td><code>queue.connection</code></td>
</tr>
<tr>
<td>Queue (Base Class)</td>
<td><a href="https://laravel.com/api/%7B%7Bversion%7D%7D/Illuminate/Queue/Queue.html">Illuminate\Queue\Queue</a></td>
<td></td>
</tr>
<tr>
<td>Redirect</td>
<td><a href="https://laravel.com/api/%7B%7Bversion%7D%7D/Illuminate/Routing/Redirector.html">Illuminate\Routing\Redirector</a></td>
<td><code>redirect</code></td>
</tr>
<tr>
<td>Redis</td>
<td><a href="https://laravel.com/api/%7B%7Bversion%7D%7D/Illuminate/Redis/RedisManager.html">Illuminate\Redis\RedisManager</a></td>
<td><code>redis</code></td>
</tr>
<tr>
<td>Redis (Instance)</td>
<td><a href="https://laravel.com/api/%7B%7Bversion%7D%7D/Illuminate/Redis/Connections/Connection.html">Illuminate\Redis\Connections\Connection</a></td>
<td><code>redis.connection</code></td>
</tr>
<tr>
<td>Request</td>
<td><a href="https://laravel.com/api/%7B%7Bversion%7D%7D/Illuminate/Http/Request.html">Illuminate\Http\Request</a></td>
<td><code>request</code></td>
</tr>
<tr>
<td>Response</td>
<td><a href="https://laravel.com/api/%7B%7Bversion%7D%7D/Illuminate/Contracts/Routing/ResponseFactory.html">Illuminate\Contracts\Routing\ResponseFactory</a></td>
<td></td>
</tr>
<tr>
<td>Response (Instance)</td>
<td><a href="https://laravel.com/api/%7B%7Bversion%7D%7D/Illuminate/Http/Response.html">Illuminate\Http\Response</a></td>
<td></td>
</tr>
<tr>
<td>Route</td>
<td><a href="https://laravel.com/api/%7B%7Bversion%7D%7D/Illuminate/Routing/Router.html">Illuminate\Routing\Router</a></td>
<td><code>router</code></td>
</tr>
<tr>
<td>Schema</td>
<td><a href="https://laravel.com/api/%7B%7Bversion%7D%7D/Illuminate/Database/Schema/Builder.html">Illuminate\Database\Schema\Builder</a></td>
<td></td>
</tr>
<tr>
<td>Session</td>
<td><a href="https://laravel.com/api/%7B%7Bversion%7D%7D/Illuminate/Session/SessionManager.html">Illuminate\Session\SessionManager</a></td>
<td><code>session</code></td>
</tr>
<tr>
<td>Session (Instance)</td>
<td><a href="https://laravel.com/api/%7B%7Bversion%7D%7D/Illuminate/Session/Store.html">Illuminate\Session\Store</a></td>
<td><code>session.store</code></td>
</tr>
<tr>
<td>Storage</td>
<td><a href="https://laravel.com/api/%7B%7Bversion%7D%7D/Illuminate/Filesystem/FilesystemManager.html">Illuminate\Filesystem\FilesystemManager</a></td>
<td><code>filesystem</code></td>
</tr>
<tr>
<td>Storage (Instance)</td>
<td><a href="https://laravel.com/api/%7B%7Bversion%7D%7D/Illuminate/Contracts/Filesystem/Filesystem.html">Illuminate\Contracts\Filesystem\Filesystem</a></td>
<td><code>filesystem.disk</code></td>
</tr>
<tr>
<td>URL</td>
<td><a href="https://laravel.com/api/%7B%7Bversion%7D%7D/Illuminate/Routing/UrlGenerator.html">Illuminate\Routing\UrlGenerator</a></td>
<td><code>url</code></td>
</tr>
<tr>
<td>Validator</td>
<td><a href="https://laravel.com/api/%7B%7Bversion%7D%7D/Illuminate/Validation/Factory.html">Illuminate\Validation\Factory</a></td>
<td><code>validator</code></td>
</tr>
<tr>
<td>Validator (Instance)</td>
<td><a href="https://laravel.com/api/%7B%7Bversion%7D%7D/Illuminate/Validation/Validator.html">Illuminate\Validation\Validator</a></td>
<td></td>
</tr>
<tr>
<td>View</td>
<td><a href="https://laravel.com/api/%7B%7Bversion%7D%7D/Illuminate/View/Factory.html">Illuminate\View\Factory</a></td>
<td><code>view</code></td>
</tr>
<tr>
<td>View (Instance)</td>
<td><a href="https://laravel.com/api/%7B%7Bversion%7D%7D/Illuminate/View/View.html">Illuminate\View\View</a></td>
<td></td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ 中国大事记]]></title>
        <id>https://imcm.xyz/china-history/</id>
        <link href="https://imcm.xyz/china-history/">
        </link>
        <updated>2020-07-17T10:25:10.000Z</updated>
        <summary type="html"><![CDATA[<p>公元前4300前——2500年：大汶口文化中晚期，处于父系氏族公社时期。</p>
]]></summary>
        <content type="html"><![CDATA[<p>公元前4300前——2500年：大汶口文化中晚期，处于父系氏族公社时期。</p>
<!-- more -->
<p>约4000多年前：传说中的黄帝、尧、舜、禹时期。</p>
<p>帝尧时期：尧命羲和观测天象，制定历法，以366日为一年。</p>
<p>约公元前21世纪：禹将部落联盟首领之位传子启，夏朝建立。</p>
<p>约公元前21前17世纪：二里头文化繁荣时期，二里头文化与我国历史记载中的夏朝时间基本相吻合。</p>
<p>公元前2000年：中国约在此时已有凿井取水的技术。</p>
<p>约公元前1600年：汤伐夏桀，战于鸣条，夏朝灭亡。</p>
<p>约公元前16世纪：商汤制定刑法，后来称为《汤刑》。</p>
<p>约公元前14世纪：盘庚即位，迁都于殷，商朝中兴。</p>
<p>约公元前13世纪：商王武丁任命傅说为相，使商朝政治局面大有改善。</p>
<p>约公元前12世纪：商朝进入青铜器全盛时代。</p>
<p>公元前12世纪：周人首领古公亶父迁周人于岐山，周朝王业自此开始。</p>
<p>公元前1046年：周武王率军伐商，在牧野之战中大败商军，灭亡商朝。</p>
<p>公元前10世纪：周穆王西巡，会见西王母，在《穆天子传》中有记载。</p>
<p>公元前9世纪：周厉王实行“专利”，引起国人不满。</p>
<p>公元前841年：国人暴动，厉王出奔，召公、周公二相行政，号曰“共和”看，自此，中国历史始有准确年代。</p>
<p>公元前828年：厉王死于彘，召公、周公立太子静为王，是为周宣王。</p>
<p>公元前771年：申侯与缯、西夷犬戎攻周幽王，杀之于骊山，西周亡。</p>
<p>公元前770年：周平王自镐京东迁洛邑，自是年起史称东周。</p>
<p>公元前750年：秦文公伐戎，戎败，文公收其民。</p>
<p>公元前722年：史书《春秋》记事从本年开始。</p>
<p>公元前685年：齐桓公即位，以管仲为相，齐国实力大增，成为霸主。</p>
<p>公元前684年：齐鲁长勺之战，齐师败绩。</p>
<p>公元前632年：晋国联合齐、宋、秦之师破楚师于城濮，晋文公盟诸侯于践土。</p>
<p>公元前594年：鲁国实行“初税亩”，标志井田制开始瓦解。</p>
<p>公元前536年：郑国子产铸刑书。</p>
<p>公元前514年：吴王阖闾召伍员为行人（外交官），与其共谋国事。</p>
<p>公元前479年：孔子去世，孔子是我国古代著名思想家、教育家，为儒家学派创始人。</p>
<p>公元前473年：越王勾践灭吴，后会齐、晋诸侯于徐州，成为诸侯霸主。</p>
<p>公元前453年：晋国赵、韩、魏三家共灭智氏，三分其领地。</p>
<p>公元前445年：魏文侯即位。他在位期间，任用李悝在魏国实行变法。</p>
<p>公元前403年：周威烈王命赵、韩、魏列为诸侯。</p>
<p>公元前391年：齐国田和迁齐康公于海上，田氏遂有齐国。</p>
<p>公元前381年：楚悼王卒，他在位期间任用吴起在楚国变法。</p>
<p>公元前356年：秦孝公任用商鞅，实行变法。</p>
<p>公元前221年：战国时期结束，秦王嬴政建立起中国封建社会历史上第一个统一王朝——秦朝。</p>
<p>公元前202年：刘邦称帝，是为汉高祖刘邦，建立汉朝，定都长安。</p>
<p>公元前141年：汉景帝死，皇太子彻嗣位，是为汉武帝。文帝、景帝统治时期，汉朝社会经济逐渐发展，史称“文景之治”。</p>
<p>公元前119年：卫青、霍去病分道出击匈奴，其后匈奴远徙，漠南无王庭。</p>
<p>公元前51年：汉宣帝召集石渠阁会议，讲论五经异同。</p>
<p>公元8年：王莽即真天子位，定国号曰“新”，西汉灭亡。</p>
<p>公元25年：刘秀称帝，建元建武，是为东汉光武帝。</p>
<p>公元92年：汉和帝与宦官郑众定议，诛大将军窦宪，郑众以功封侯，是为东汉宦官用权之始。</p>
<p>公元166年：第一次党锢之祸，司隶校尉李膺等200余人被称为党人，逮捕下狱。</p>
<p>公元184年：张角率众起义，因起义军皆戴黄巾，故称黄巾起义。</p>
<p>公元265年：司马炎废魏主，称帝，是为晋武帝，定都洛阳。</p>
<p>公元357年：前秦苻坚即位，称大秦天王，汉人王猛辅政。</p>
<p>公元383年：晋秦淝水之战，前秦大败，内部分崩。</p>
<p>公元399～412年：高僧法显前往天竺求佛，著有《佛国记》。</p>
<p>公元420年：刘裕废晋恭帝自立，国号宋，史称刘宋，是为宋武帝。南朝开始。</p>
<p>公元500年：祖冲之去世，生前首次把圆周率准确数值推算到小数点后七位数。</p>
<p>公元581年：杨坚称帝，国号隋，是为隋文帝，建都长安。</p>
<p>公元618年：李渊称帝，国号唐，是为唐高祖，隋朝亡。</p>
<p>公元645年：玄奘取经而还，抵达长安，《大唐西域记》成书。</p>
<p>公元690年：武则天废睿宗，称帝，改国号为周。</p>
<p>公元705年：张柬之等人发动政变，逼武则天退位，复立中宗李显，复国号唐。</p>
<p>公元713年：唐朝封靺鞨首领大祚荣为都督、渤海郡王。</p>
<p>公元738年：《唐六典》成书。</p>
<p>公元745年：唐玄宗敕改波斯（景教）寺为大秦寺。</p>
<p>公元755年：唐朝爆发安史之乱，由盛转衰。</p>
<p>公元813年：唐宪宗元和八年，李吉甫撰成《元和郡县图志》。</p>
<p>公元907年：朱温逼唐哀帝禅让，即帝位，改名朱晃，是为后梁太祖，史称后梁，唐朝亡。</p>
<p>公元916年：契丹首领耶律阿保机称帝，是为辽太祖，建契丹。</p>
<p>公元960年：陈桥兵变，赵匡胤即位，是为宋太祖，国号宋，后周亡。</p>
<p>公元993年：王小波、李顺起义。</p>
<p>1038年：党项首领元昊称帝，国号大夏，史称西夏，是为西夏景宗，建都兴庆府。</p>
<p>1127年：金军俘宋徽、钦二帝北还，北宋灭亡。康王赵构于南京应天府即位，是为宋高宗，建立南宋。</p>
<p>1141年：宋金议和，史称绍兴和议。</p>
<p>1164年：隆兴和议，宋金重订和约。</p>
<p>1279年：元军攻破崖山，宋帝溺死，宋亡。</p>
<p>1286年：《农桑辑要》颁行，为中国现存最古的官修农书。</p>
<p>1345年：元朝修成《辽史》《金史》《宋史》。</p>
<p>1355年：刘福通迎韩山童之子韩林儿为帝，建国号宋，改元龙凤，韩林儿号小明王。</p>
<p>1368年：朱元璋在应天府即帝位，国号明，是为明太祖。</p>
<p>1399～1402年：燕王朱棣发动靖难之役，攻占南京，即位称帝，是为明成祖。</p>
<p>1405年：明成祖命宦官郑和与王景弘等使南洋各地，郑和下西洋自此始。</p>
<p>1407年：明成祖永乐五年，《永乐大典》成书。</p>
<p>1421年：明成祖迁都北京，以南京为留都。</p>
<p>1429年：明朝设钞关，以船只大小收税，称“船料”。</p>
<p>1449年：瓦剌也先犯大同，英宗率军亲征，在土木堡被瓦剌军所破，英宗被俘，史称“土木之变”。</p>
<p>1457年：宦官曹吉祥及其党羽石亨等乘景帝病危，迎太上皇英宗复位，史称“夺门之变”。</p>
<p>1521～1524年：大礼议之争，群臣力争，下狱者100多人。</p>
<p>1542年：宫婢杨金英等谋杀世宗未遂，史称嘉靖“宫婢之变”。</p>
<p>1563年：巡抚谭纶率戚继光、俞大猷、刘显三将大破倭寇，收复兴化，浙、闽倭寇渐平。</p>
<p>1571年：明朝封俺答为顺义王，开互市。</p>
<p>1581年：张居正进行赋役制度改革，全面推行一条鞭法。</p>
<p>1587年：海瑞死于南京右都御史任上，百姓为之罢市致哀。</p>
<p>1588年：努尔哈赤统一建州女真。</p>
<p>1594年：顾宪成被责革职，遂回无锡修东林书院讲学，讽议朝政评论人物，东林党议始于此。</p>
<p>1599年：明神宗遣宦官至各地征税、办矿，激起临清、沙市、武昌、汉阳等地民变。</p>
<p>1600年：耶稣会教士利玛窦到达北京，明神宗允许在京师建教堂传教。</p>
<p>1615年：努尔哈赤正式建立八旗制度。</p>
<p>1616年：努尔哈赤在赫图阿拉称汗，国号金，史称后金。</p>
<p>1618年：后金汗努尔哈赤以“七大恨”誓师伐明。</p>
<p>1619年：萨尔浒之战，明军大败。</p>
<p>1621年：后金攻陷沈阳，又陷辽阳，并迁都辽阳。</p>
<p>1625年：后金迁都沈阳，改称盛京。</p>
<p>1633年：高迎祥、李自成、张献忠等起义军渡黄河南下，进入豫西。</p>
<p>1636年：皇太极即帝位，改国号为清。</p>
<p>1637年：宋应星所著《天工开物》刊行。</p>
<p>1641年：李自成起义军攻入洛阳，杀明福王朱常洵。</p>
<p>1644年：李自成率大顺军攻占北京，明崇祯帝自缢，明亡。</p>
<p>1655年：清世祖顺治帝于内十三衙门立铁牌，严禁太监干政。</p>
<p>1661年：郑成功率军驱逐荷兰殖民者，收复台湾。</p>
<p>1729年：因西北用兵，设军机房，后改为军机处。</p>
<p>1735年：清世宗雍正帝去世，子弘历继位，是为清高宗，改元乾隆。</p>
<p>1747年：大金川土司沙罗奔举兵反，清廷派重兵平叛，两年后平定。</p>
<p>1762年：清廷设伊犁将军，总统新疆南北两路事务。</p>
<p>1771年：土尔扈特部在首领渥巴锡率领下，长途跋涉，从沙俄重返祖国。</p>
<p>1776年：大金川索诺木出降，大小金川之役结束。</p>
<p>1782年：第一部《四库全书》修成。</p>
<p>1784年：美国商船“中国皇后”号从纽约出发，绕道非洲好望角，驶抵广州。</p>
<p>1785年：乾隆帝于乾清宫设“千叟宴”，60岁以上老人入宴者达3000人。</p>
<p>1793年：乾隆帝在热河行宫接见英国马戛尔尼使团。</p>
<p>1795年：乾隆帝立皇十五子颙琰为皇太子，定明年继承皇位，改元嘉庆。</p>
<p>1813年：林清率领的起义军攻入紫禁城，旋即失败。</p>
<p>1814年：纂辑《全唐文》告成，全书1000卷，收入作家3000多人，作品18000多篇。</p>
<p>1814年：史学家赵翼去世，著有《廿二史札记》《皇朝武功纪盛》等。</p>
<p>1821年：清廷重申禁烟令，严禁在澳门、黄埔囤放和售卖鸦片。</p>
<p>1822年：清廷定例禁止银两出洋。</p>
<p>1823年：医学家陈念祖去世，著作颇丰，以《医学三字经》广为流传。</p>
<p>1824年：林则徐综办江浙水利。</p>
<p>1825年：《西夏书事》刊行，吴广成辑唐以来诸史、文集和野史有关西夏史事，以编年体成书。</p>
<p>1826年：贺长龄、魏源等编《皇朝经世文编》成书，120卷，搜录重要史料。</p>
<p>1829年：洋钱、鸦片为害日甚，道光帝命严行查禁。</p>
<p>1830年：小说家李汝珍约于此年去世，著有长篇小说《镜花缘》。</p>
<p>1833年：清廷定洋银与纹银使用条例。</p>
<p>1839年：林则徐在虎门海滩销毁收缴的鸦片。</p>
<p>1840年：鸦片战争爆发。清廷命琦善为钦差大臣，赴广州与英谈判，林则徐被革职。</p>
<p>1842年：清廷被迫与英国签订《南京条约》。</p>
<p>1844年：清廷被迫先后签订中美《望厦条约》、中法《黄埔条约》。</p>
<p>1845年：英国驻沪领事与上海道台订立《上海租地章程》，是为外国侵略者在中国设立租界的开始。</p>
<p>1851年：太平天国起义爆发。</p>
<p>1853年：太平军沿长江东下，占领南京，定为首都，改称天京。</p>
<p>1853年：太平天国颁布《天朝田亩制度》。</p>
<p>1855年：太平军北伐失败，主将林凤祥、李开芳牺牲。</p>
<p>1856年：太平天国发生天京事变。</p>
<p>1856年：英国借口“亚罗号事件”，挑起第二次鸦片战争。</p>
<p>1857年：石达开受洪秀全猜忌，率众自天京出走。</p>
<p>1858年：俄、美、英、法逼迫清廷相继签订《天津条约》。</p>
<p>1859年：太平天国颁布《资政新篇》。</p>
<p>1860年：美国人华尔组成“洋枪队”，协助清廷镇压太平军。</p>
<p>1860年：英法联军攻陷北京，恭亲王与英、法、俄分别签订《北京条约》。</p>
<p>1861年：咸丰卒，慈禧发动政变，慈禧、慈安两太后垂帘听政，史称“辛酉政变”。</p>
<p>1864年：天京为清军攻陷，太平天国起义失败。</p>
<p>1872年：李鸿章在上海创办轮船招商局，侨商陈启源在广东南海创办继昌隆缫丝局，中国民族资本主义近代工业开始出现。</p>
<p>1875年：清廷以兵部侍郎郭嵩焘任出使英国钦差大臣，为中国正式派遣驻外使节的开始。</p>
<p>1885年：清军取得谅山大捷，此后李鸿章和法国公使巴德诺在天津签订《中法新约》，中法战争结束。</p>
<p>1888年：北洋海军建成，以丁汝昌为提督，林泰曾、刘步蟾为左、右翼总兵。</p>
<p>1894年：中日甲午战争爆发。</p>
<p>1898年：光绪帝下“明定国是”诏书，戊戌变法开始。八月初六（9月21日），慈禧幽禁光绪帝于瀛台，百日维新失败。</p>
<p>1900年：由英国海军上将西摩尔统率的八国联军进犯北京。</p>
<p>1901年：清廷与俄、英、美、日、德、法、意、奥、比、西、荷等十一国签订《辛丑条约》。</p>
<p>1905年：清廷废除科举考试制度。</p>
<p>1911年：四川保路运动爆发。</p>
<p>1911年：辛亥革命。</p>
<p>1912年：南京临时政府成立，孙中山就任临时大总统，定国号为中华民国。</p>
<p>1913年：“二次革命”爆发，以失败告终。</p>
<p>1914年：袁世凯废除《中华民国临时约法》，公布《中华民国约法》。</p>
<p>1915年：日本提出灭亡中国的“二十一条”。</p>
<p>1917年：张勋复辟，旋即失败。</p>
<p>1919年：“五四”运动爆发。</p>
<p>1919年：中华革命党改组为中国国民党。</p>
<p>1921年：中国共产党成立。</p>
<p>1922年：第一次直奉战争爆发。</p>
<p>1923年：京汉铁路工人大罢工。</p>
<p>1924年：黄埔军校建立。</p>
<p>1925年：3月12日，孙中山在北京逝世。</p>
<p>1927年：《现代评论》创刊于北京，形成现代评论派。</p>
<p>1927年：汉口、九江民众收回英租界。</p>
<p>1928年：皇姑屯事件，张作霖死。</p>
<p>1930年：蒋阎冯中原大战。</p>
<p>1931年：日本帝国主义在沈阳制造“九一八”事变。</p>
<p>1935年：聂耳为电影《风云儿女》主题歌谱曲《义勇军进行曲》。</p>
<p>1935年：曾朴于本年去世，著有长篇小说《孽海花》。</p>
<p>1935年：“一二·九”运动爆发。</p>
<p>1936年：12月12日，张学良、杨虎城发动西安事变。</p>
<p>1937年：卢沟桥事变发生，全面抗日战争开始。</p>
<p>1937年：12月，南京陷落，日军入城大肆杀戮。</p>
<p>1940年：八路军发动百团大战。</p>
<p>1941年：陈纳德飞虎队来中国协助抗战。</p>
<p>1945年：中、美、英三国发表《波茨坦公告》，促令日本无条件投降。</p>
<p>1945年：中印公路全线贯通。</p>
<p>1945年：抗日战争胜利。</p>
<p>1945年：孙犁创作短篇小说《荷花淀》。</p>
<p>1946年：巴金写成中篇小说《寒夜》。</p>
<p>1947年：土地改革运动在解放区全面展开。</p>
<p>1949年：10月1日，中华人民共和国成立。</p>
<p>1953年：开始执行发展国民经济的第一个五年计划。</p>
<p>1955年：成（都）——阿（坝）公路全线通车，全长507千米。</p>
<p>1957年：第一届中国出口商品交易会在广州举行（简称“广交会”）。</p>
<p>1965年：中国人工合成结晶牛胰岛素，是世界上首次人工合成蛋白质。</p>
<p>1980年：中国向太平洋预定海域发射的第一枚运载火箭获得圆满成功。</p>
<p>1984年：中国体育代表团在美国洛杉矶举行的第23届奥运会上获得15枚金牌，实现了中国在奥运会金牌榜上零的突破。</p>
<p>1987年：中葡两国政府在北京签署关于澳门问题的联合声明，确认中国政府于1999年12月20日对澳门恢复行使主权。</p>
<p>1988年：北京正负电子对撞机首次对撞成功。</p>
<p>1990年：第11届亚洲运动会在北京举行，这是中国第一次承办综合性国际体育大赛。</p>
<p>1997年：7月1日，中国政府对香港恢复行使主权。</p>
<p>1999年：12月20日，中国政府对澳门恢复行使主权。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux 下使用 systemd 设置开机启动项]]></title>
        <id>https://imcm.xyz/linux-systemd-start/</id>
        <link href="https://imcm.xyz/linux-systemd-start/">
        </link>
        <updated>2020-07-16T04:02:05.000Z</updated>
        <summary type="html"><![CDATA[<p>下面的教程将介绍如何将命令或程序配置为开机启动时自动运行的服务。完成配置之后，就可以通过 Linux 命令行来「启动/停止/禁用」这个服务了。</p>
]]></summary>
        <content type="html"><![CDATA[<p>下面的教程将介绍如何将命令或程序配置为开机启动时自动运行的服务。完成配置之后，就可以通过 Linux 命令行来「启动/停止/禁用」这个服务了。</p>
<!-- more -->
<h2 id="创建服务">创建服务</h2>
<p>在树莓派上创建一个 .service 文件。例如：</p>
<p>myscript.service</p>
<pre><code class="language-shell">[Unit]
Description=My service
After=network.target

[Service]
ExecStart=/usr/bin/python3 -u main.py
WorkingDirectory=/home/pi/myscript
StandardOutput=inherit
StandardError=inherit
Restart=always
User=pi

[Install]
WantedBy=multi-user.target
</code></pre>
<p>在上面的范例中，服务会去以 Python 3 来运行 /home/pi/myscript 目录下面的 main.py 脚本。用这种方法，你不仅可以配置 Python 脚本，只需要将 ExecStart 这行改为需要启动的任何程序或脚本即可。</p>
<p>将这个文件用 root 用户保存到 /etc/systemd/system 目录：</p>
<pre><code class="language-shell">sudo cp myscript.service /etc/systemd/system/myscript.service
</code></pre>
<p>然后就可以用下面的命令尝试启动服务了：</p>
<pre><code class="language-shell">sudo systemctl start myscript.service
</code></pre>
<p>停止服务：</p>
<pre><code class="language-shell">sudo systemctl stop myscript.service
</code></pre>
<p>设置开机时自动运行：</p>
<pre><code class="language-shell">sudo systemctl enable myscript.service
</code></pre>
<p>systemctl 命令还可以用来重启或禁用它。</p>
<h2 id="注意事项">注意事项：</h2>
<p>1、启动顺序取决于他们的依赖关系。如果是依赖于网络的服务，应当在引导过程中尽可能晚一点启动。<br>
使用 man systemctl 命令或访问 https://fedoramagazine.org/what-is-an-init-system/ 了解更多。</p>
<p>本文转自：<a href="https://shumeipai.nxez.com/2020/06/30/linux-usage-systemd.html">树莓派实验室</a></p>
]]></content>
    </entry>
</feed>