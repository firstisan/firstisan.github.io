<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://imcm.xyz</id>
    <title>IMCM</title>
    <updated>2020-06-17T07:24:29.562Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://imcm.xyz"/>
    <link rel="self" href="https://imcm.xyz/atom.xml"/>
    <subtitle>摒弃世俗浮躁，追求技术精湛</subtitle>
    <logo>https://imcm.xyz/images/avatar.png</logo>
    <icon>https://imcm.xyz/favicon.ico</icon>
    <rights>All rights reserved 2020, IMCM</rights>
    <entry>
        <title type="html"><![CDATA[gyp: No Xcode or CLT version detected!]]></title>
        <id>https://imcm.xyz/post/gyp-no-xcode/</id>
        <link href="https://imcm.xyz/post/gyp-no-xcode/">
        </link>
        <updated>2020-06-17T03:02:39.000Z</updated>
        <summary type="html"><![CDATA[<p>npm install 安装依赖包报如下错误</p>
]]></summary>
        <content type="html"><![CDATA[<p>npm install 安装依赖包报如下错误</p>
<!-- more -->
<figure data-type="image" tabindex="1"><img src="https://imcm.xyz/post-images/1592363327243.png" alt="" loading="lazy"></figure>
<h3 id="解决思路">解决思路</h3>
<p>Mac升级到High sierra 后，发现执行使用npm 或者yarn 的时候，不时会报<code>gyp: No Xcode or CLT version detected!</code> 的错误, 原因是缺了xcode 的CLI 工具, 只要执行下面的命令来安装就可以了。</p>
<pre><code class="language-shell">sudo xcode-select --install
</code></pre>
<h4 id="再执行">再执行</h4>
<pre><code class="language-shell"> $ xcode-select --install
</code></pre>
<h4 id="后出现错误">后出现错误</h4>
<pre><code class="language-shell">xcode-select: error: command line tools are already installed, use &quot;Software Update&quot; to install updates
</code></pre>
<h3 id="解决办法">解决办法</h3>
<pre><code class="language-shell">$ sudo rm -rf $(xcode-select -print-path)
$ xcode-select --install
</code></pre>
<p>问题完美解决<br>
如果提示权限不够那么加上sudo</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Laravel Composer 笔记]]></title>
        <id>https://imcm.xyz/post/laravel-composer-note/</id>
        <link href="https://imcm.xyz/post/laravel-composer-note/">
        </link>
        <updated>2020-06-16T07:33:42.000Z</updated>
        <summary type="html"><![CDATA[<p>记录Composer版本说明和如何在正式环境使用Composer安装Laravel依赖并排除开发环境需要的第三方开发包</p>
]]></summary>
        <content type="html"><![CDATA[<p>记录Composer版本说明和如何在正式环境使用Composer安装Laravel依赖并排除开发环境需要的第三方开发包</p>
<!-- more -->
<h3 id="使用-composer-安装">使用 Composer 安装：</h3>
<pre><code class="language-shell">$ composer require &quot;barryvdh/laravel-debugbar:~3.2&quot; --dev
</code></pre>
<p>以上命令，版本限定符 ~ 意味着我们希望安装 <code>&gt;= 3.2</code> 并且 <code>&lt; 4.0</code> 的版本，例如 <code>3.2.1</code>、 <code>3.11.3</code>、 <code>3.8</code>。根据语义化版本的定义，次版本号的变化是新增功能，所以 API 是稳定的，也就是可以安全更新的。</p>
<h3 id="什么是语义化版本">什么是语义化版本？</h3>
<p>版本格式：主版本号。次版本号。修订号，如 <code>1.0.1</code>, <code>3.2.39</code>。版本号递增规则如下：</p>
<ul>
<li><strong>主版本号</strong>：当你做了不兼容的 API 修改</li>
<li><strong>次版本号</strong>：当你做了向下兼容的功能性新增</li>
<li><strong>修订号</strong>：当你做了向下兼容的问题修正。<br>
另外，先行版本号及版本编译信息可以加到 <code>主版本号.次版本号.修订号</code> 的后面，作为延伸。</li>
</ul>
<p>一般我们使用 3 个部分来表示一个版本，例如：1.4.23，1 为主版本号，4 为次版本号，23 为修订号或者补丁版本号。先行版本如 <code>1.0.0-alpha1</code> 这样在后面添加修饰符号来表示。</p>
<p>最后 Composer 安装时 <code>--dev</code> 参数是指明只在 <strong>开发环境</strong> 中使用，这样上线代码到 <strong>生产环境</strong> 时，我们可使用 <code>composer install --no-dev</code> 命令来排除这些扩展包的安装。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[在Docker 中运行 OpenWrt 旁路网关]]></title>
        <id>https://imcm.xyz/post/docker-openwrt/</id>
        <link href="https://imcm.xyz/post/docker-openwrt/">
        </link>
        <updated>2020-06-10T06:46:40.000Z</updated>
        <summary type="html"><![CDATA[<p>今天小苏为大家带来的是（咕很久的）在 Docker 中运行 OpenWrt 做旁路网关的教程~</p>
]]></summary>
        <content type="html"><![CDATA[<p>今天小苏为大家带来的是（咕很久的）在 Docker 中运行 OpenWrt 做旁路网关的教程~</p>
<!-- more -->
<p>本文转自： <a href="https://mlapp.cn/376.html">美丽应用</a></p>
<h3 id="场景1">场景1</h3>
<p>众所周知，OpenWrt 是面向嵌入型设备的 Linux 发行版，所以 OpenWrt 系统运行时的资源占用率会很低。而树莓派的硬件性能要比普通路由器要高很多。虽然树莓派在硬件配置上的绝对优势能让 OpenWrt 有更大的施展空间，但相应的，硬件上的优势也带来了资源的浪费（OpenWrt 在树莓派上正常运行时，资源占用率只有不到 1/10）。再加上 OpenWrt 的可扩展性不是很强，所以很多能在 Raspbian/Debian 上能做的事情在 OpenWrt 上往往无法实现。</p>
<p>所以，可不可以让 OpenWrt 与我们常用的系统共存呢？这样，我们可以享受到 OpenWrt 的功能，又可以让在我们常用的系统中完成一般性的 Linux 工作。</p>
<p>通过 Docker，完全可以。</p>
<h3 id="场景2">场景2</h3>
<p>OpenWrt 的功能固然强大，但是树莓派的板载网卡无线吞吐能力实在是无力吐槽，能否将现有路由器与树莓派结合使用，同时发挥现有路由器的信号优势与 OpenWrt 的软件优势呢？</p>
<p>通过旁路网关，完全可以。</p>
<h3 id="旁路网关">旁路网关</h3>
<p>那么，什么是旁路网关呢？</p>
<p>普通的路由器往往集无线信号转发、网关、DNS 服务器等角色为一身，其中的“网关”角色负责路由器内部数据的处理。但因为一般家用的路由器硬件性能很有限，在运行一些比较吃资源的应用（如酸酸乳、去广告等）时，几乎会占满所有硬件资源，导致路由器网络/系统不稳定等诸多问题。既然路由器的硬件性能有限，那可不可以把网关的重任交给硬件性能更好的设备去做，让路由器安安心心地做好它的老本行 – 无线转发呢？</p>
<p>完全可以。</p>
<p>所谓的旁路网关，就是在路由器之外的其他硬件设备上搭建一个网关环境，把路由器肩负的网关重任交给其他更适合的设备来做，同时，旁路网关处理完的结果会返回给路由器，由路由器继续进行无线转发。</p>
<p>这样，每个角色各司其职，路由器肩上的任务轻了，即使是油管 4K 也能轻松跑满网速了，而旁路由（树莓派）也结束了它吃灰的命运。由此资源的充分利用，一举两得。</p>
<p>在接下来的文章中，我们将在 Docker 容器中运行 OpenWrt，并通过设置，让 Docker 容器中的 OpenWrt 网关接管路由器自身的网关，减轻路由器的负担，同时，由于网关被 OpenWrt 接管，所以 OpenWrt 中的大部分应用都是可用的，比如酸酸乳，V2ray，去广告等。做个不恰当的比喻， OpenWrt 网关接管路由器自身的网关后，你可以理解为路由器是 OpenWrt 的一块外置网卡。</p>
<h3 id="镜像介绍">镜像介绍</h3>
<p>小苏为大家提供的 OpenWrt 镜像所用系统为基于 Lean 大源码编译的 32位/ IPV4 Only 固件，基本功能与之前的自编译固件相同，并且 Docker 镜像将跟随自编译固件的更新而更新。自编译固件的详细介绍请见：<br>
<a href="https://mlapp.cn/369.html">https://mlapp.cn/369.html</a></p>
<p>但值得注意的是，Docker 固件没有无线及无线相关功能。在以后的文章中，小苏将给大家分享 OpenWrt 镜像的制作步骤，敬请期待~（Q：喂！你挖的坑还不够多吗？A：咕咕咕！）。</p>
<h3 id="重要说明">重要说明</h3>
<p>1.<strong>此教程中提到的 Docker 镜像只适用于树莓派 2B/3B/3B+/4B，在其他设备上理论上不能正常使用</strong>。但文中所述内容对其他设备应该有参考意义。</p>
<p>2.在 Docker 中运行 OpenWrt ，树莓派将工作在旁路网关模式下，在这种工作模式下，树莓派的板载无线网卡不会工作（同时在 OpenWrt 的控制面板中也找不到有关 WIFI 的设置）。所以，需要将树莓派与路由器通过网线连接来使用。</p>
<h3 id="前期准备">前期准备</h3>
<p>既然需要在 Docker 中运行 OpenWrt ，那么首先需要在树莓派的现有系统上安装 Docker，在不同发行版上安装 Docker 的教程有很多，大家可以自行在搜索引擎中搜索相关内容以完成 Docker 的安装。</p>
<p>如果你的设备是 3B/3B+/4B，小苏推荐使用“树莓派爱好者基地”编译的 64 位 Debian，此版本 Debian 可以充分发挥 64 位 CPU 的性能，同时默认开启 Docker，KVM 等功能，其中，Docker 功能开箱即用，非常方便。</p>
<p>如果你的设备是树莓派2B，那么你可能需要在其他发行版上手动安装 Docker 了，但是小苏提供的 Docker 镜像是支持 2B~4B 设备的，换句话说，只要在其他发行版上成功安装了 Docker，也是可以用我提供的 OpenWrt 镜像的。</p>
<p>为了方便叙述以及为大家提供一个参考的宿主机环境，下文内容基于“树莓派爱好者基地”编译的 64 位 Debian。当然，如果你在你使用的发行版上安装了 Docker，步骤是一样的。</p>
<p>“树莓派爱好者基地”专版64位 Debian 功能介绍（内含下载链接）：</p>
<p><a href="https://github.com/openfans-community-offical/Debian-Pi-Aarch64/blob/master/README_zh.md">https://github.com/openfans-community-offical/Debian-Pi-Aarch64</a></p>
<p>下载时推荐选择“无桌面基础系统加强版”（如下图），如果你有图形界面需求，也可以选择带图形界面的其他版本镜像。</p>
<figure data-type="image" tabindex="1"><img src="https://imcm.xyz/post-images/1591772689336.png" alt="" loading="lazy"></figure>
<p>下载镜像烧写到树莓派的 SD 卡并上电开机后，系统会自动完成扩展 SD 卡空间的操作，这个过程大约需要3~5分钟（期间会重启几次）。估摸着时间差不多以后，用网线将树莓派的板载网口与路由器的 Lan 口连接，之后连接树莓派的 SSH：</p>
<p>用户名：pi<br>
密码：raspberry</p>
<p>准备工作到此结束。</p>
<h3 id="步骤开始">步骤开始</h3>
<p>成功登陆到树莓派的 SSH 后，在拉取镜像之前，我们还需要进行一些额外的工作：</p>
<ol>
<li>
<h4 id="打开网卡混杂模式">打开网卡混杂模式</h4>
</li>
</ol>
<pre><code class="language-shell">sudo ip link set eth0 promisc on
</code></pre>
<ol start="2">
<li>
<h4 id="创建网络须结合实际网络情况不能照抄命令">创建网络(须结合实际网络情况，不能照抄命令)</h4>
</li>
</ol>
<pre><code class="language-shell">docker network create -d macvlan --subnet=192.168.123.0/24 --gateway=192.168.123.1 -o parent=eth0 macnet
</code></pre>
<p>这一条命令需要根据树莓派所处的网络环境来做修改，可以使用 sudo ifconfig命令来查看树莓派 eth0 网卡获得的 IP 地址，如果树莓派获得的 IP 地址为 192.168.2.154，那么说明树莓派处在 192.168.2.x网段，相应的，命令中的192.168.123.0和192.168.123.1需要被替换成 192.168.2.0和192.168.2.1：</p>
<pre><code class="language-shell">docker network create -d macvlan --subnet=192.168.2.0/24 --gateway=192.168.2.1 -o parent=eth0 macnet
</code></pre>
<p>此时，我们使用 docker network ls命令可以看到网络macnet已建立成功：</p>
<pre><code class="language-shell">$ docker network ls
NETWORK ID          NAME                DRIVER              SCOPE
10e676133746        bridge              bridge              local
f5308b94e8fa        host                host                local
16745ea66852        macnet              macvlan             local
5e72e41ea02a        none                null                local
</code></pre>
<ol start="3">
<li>
<h4 id="拉取镜像">拉取镜像</h4>
</li>
</ol>
<p>若身处国内，为提高拉取速度，请拉取阿里云仓库中的镜像：</p>
<pre><code class="language-shell">docker pull registry.cn-shanghai.aliyuncs.com/suling/openwrt:latest
</code></pre>
<p>同时小苏也提供存放在 Docker 官方仓库 中的镜像：</p>
<pre><code class="language-shell">docker pull sulinggg/openwrt:latest
</code></pre>
<p>镜像拉取完成后，我们可以执行docker images命令查看现存镜像：</p>
<pre><code class="language-shell">$ docker images
REPOSITORY                                              TAG                 IMAGE ID            CREATED             SIZE
registry.cn-shanghai.aliyuncs.com/suling/openwrt        latest              4f4bc5dca2d9        3 hours ago         112MB
</code></pre>
<p>可见，镜像已成功拉取到本地。</p>
<ol start="4">
<li>
<h4 id="创建并启动容器">创建并启动容器</h4>
</li>
</ol>
<pre><code class="language-shell">docker run --restart always --name openwrt -d --network macnet --privileged registry.cn-shanghai.aliyuncs.com/suling/openwrt:latest /sbin/init
</code></pre>
<p>其中：<br>
--restart always参数表示容器退出时始终重启，使服务尽量保持始终可用；<br>
--name openwrt参数定义了容器的名称；<br>
-d参数定义使容器运行在 Daemon 模式；<br>
--network macnet参数定义将容器加入 maxnet网络；<br>
--privileged 参数定义容器运行在特权模式下；<br>
registry.cn-shanghai.aliyuncs.com/suling/openwrt:latest为 Docker 镜像名，因容器托管在阿里云 Docker 镜像仓库内，所以在镜像名中含有阿里云仓库信息；<br>
/sbin/init定义容器启动后执行的命令。<br>
启动容器后，我们可以使用 docker ps -a命令查看当前运行的容器：</p>
<pre><code class="language-shell">$ docker ps -a
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
a26cee7cade6        openwrt:latest      &quot;/sbin/init&quot;        3 hours ago         Up 3 hours                              openwrt
</code></pre>
<p>若容器运行信息STATUS列为 UP状态，则说明容器运行正常。</p>
<ol start="5">
<li>
<h4 id="进入容器并修改相关参数">进入容器并修改相关参数</h4>
</li>
</ol>
<p>(须结合实际网络情况，不能照抄配置)</p>
<pre><code class="language-shell">docker exec -it openwrt bash
</code></pre>
<p>其中：<br>
openwrt为容器名称；<br>
bash为进入容器后执行的命令。<br>
执行此命令后我们便进入 OpenWrt 的命令行界面，首先，我们需要编辑 OpenWrt 的网络配置文件：</p>
<pre><code class="language-shell">vim /etc/config/network
</code></pre>
<p>我们需要更改 Lan 口设置：</p>
<pre><code class="language-shell">config interface 'lan'
        option type 'bridge'
        option ifname 'eth0'
        option proto 'static'
        option ipaddr '192.168.123.100'
        option netmask '255.255.255.0'
        option ip6assign '60'
        option gateway '192.168.123.1'
        option broadcast '192.168.123.255'
        option dns '192.168.123.1'
</code></pre>
<p>其中：<br>
所有的 192.168.123.x 需要根据树莓派所处网段修改，option gateway和option dns填写路由器的 IP，若树莓派获得的 IP 为 192.168.2.154，路由器 IP 为192.168.2.1，则需要这样修改：</p>
<pre><code class="language-shell">config interface 'lan'
        option type 'bridge'
        option ifname 'eth0'
        option proto 'static'
        option ipaddr '192.168.2.100'
        option netmask '255.255.255.0'
        option ip6assign '60'
        option gateway '192.168.2.1'
        option broadcast '192.168.2.255'
        option dns '192.168.2.1'
</code></pre>
<p>option ipaddr 项目定义了 OpenWrt 的 IP 地址，在完成网段设置后，IP最后一段可根据自己的爱好修改（前提是符合规则且不和现有已分配 IP 冲突）。</p>
<ol start="6">
<li>
<h4 id="重启网络">重启网络</h4>
</li>
</ol>
<pre><code class="language-shell">/etc/init.d/network restart
</code></pre>
<ol start="7">
<li>
<h4 id="进入控制面板">进入控制面板</h4>
</li>
</ol>
<p>在浏览器中输入第 5 步option ipaddr 项目中的 IP 进入 Luci 控制面板，若option ipaddr 的参数为 192.168.123.100，则可以在浏览器输入 http://192.168.123.100进入控制面板。</p>
<p>用户名：root<br>
密码：password</p>
<ol start="8">
<li>
<h4 id="关闭-dhcp-服务">关闭 DHCP 服务</h4>
</li>
</ol>
<p>在 “网络 - 接口 - Lan - 修改” 界面中，勾选下方的 “忽略此接口（不在此接口提供 DHCP 服务）”，并“保存&amp;应用”。<br>
<img src="https://imcm.xyz/post-images/1591772717735.png" alt="" loading="lazy"></p>
<ol start="9">
<li>
<h4 id="主路由-dhcp-设置">主路由 DHCP 设置</h4>
</li>
</ol>
<p>进入路由器后台中，将主路由的 DHCP 的默认网关和 DNS 服务器设置为第 5 步中option ipaddr 项目中的 IP。<br>
<img src="https://imcm.xyz/post-images/1591772738952.png" alt="" loading="lazy"></p>
<ol start="10">
<li>
<h4 id="重新连接路由器">重新连接路由器</h4>
</li>
</ol>
<p>完成以上操作后，断开设备（如手机，电脑）与路由器的连接，重新连接路由器，连接路由器的设备将获取到我们设置到的 IP。</p>
<h3 id="其他修复">其他修复</h3>
<ol>
<li>
<h4 id="关闭-wlan-硬件加速">关闭 WLAN 硬件加速</h4>
</li>
</ol>
<p>设置旁路路由后，若出现访问国内网站网速慢，不稳定的情况（多见于 Pandavan 及其改版固件，如华硕老毛子固件），请在路由器的控制面板中关闭有关 WLAN 的硬件加速，比如选择“Offload TCP/UDP for LAN”（若未出现此现象请忽略）：<br>
<img src="https://imcm.xyz/post-images/1591772753376.png" alt="" loading="lazy"></p>
<ol start="2">
<li>
<h4 id="宿主机网络修复">宿主机网络修复</h4>
</li>
</ol>
<p>OpenWrt 容器运行后，宿主机内可能无法正常连接外部网络，需要修改宿主机的 /etc/network/interfaces 文件以修复：</p>
<p><strong>(须结合实际网络情况，不能照抄配置)</strong></p>
<pre><code class="language-shell">cp /etc/network/interfaces /etc/network/interfaces.bak # 备份文件
vim /etc/network/interfaces # 使用 vim 编辑文件
</code></pre>
<p>以“树莓派爱好者基地”64 位 Debian 为例，向文件末尾添加：</p>
<pre><code class="language-shell">auto eth0
iface eth0 inet manual

auto macvlan
iface macvlan inet static
  address 192.168.123.200
  netmask 255.255.255.0
  gateway 192.168.123.1
  dns-nameservers 192.168.123.1
  pre-up ip link add macvlan link eth0 type macvlan mode bridge
  post-down ip link del macvlan link eth0 type macvlan mode bridge
</code></pre>
<p>其中，所有的 192.168.123.x都需要按照树莓派所处网段更改，gateway和dns-nameservers填写路由器的 IP，若树莓派获得的 IP 为 192.168.2.154，路由器 IP 为192.168.2.1，则需要这样修改：</p>
<pre><code class="language-shell">auto eth0
iface eth0 inet manual

auto macvlan
iface macvlan inet static
  address 192.168.2.200
  netmask 255.255.255.0
  gateway 192.168.2.1
  dns-nameservers 192.168.2.1
  pre-up ip link add macvlan link eth0 type macvlan mode bridge
  post-down ip link del macvlan link eth0 type macvlan mode bridge
</code></pre>
<p>修改后重启树莓派，之后树莓派的局域网 IP 地址将会固定为/etc/network/interfaces文件中address参数中的地址。</p>
<ol start="3">
<li>
<h4 id="手动指定网关">手动指定网关</h4>
</li>
</ol>
<p>如果路由器固件不支持自定义 DHCP 服务的网关及 DNS 地址（常见于路由器官方固件），或者只希望局域网下的个别设备接入旁路网关时，须在接入设备上做以下配置：</p>
<h5 id="安卓">安卓：</h5>
<figure data-type="image" tabindex="2"><img src="https://imcm.xyz/post-images/1591772765001.png" alt="" loading="lazy"></figure>
<p>需要在安卓的 WIFI 设置内将 IP 获取方式更改为“静态”或“手动”，其中：<br>
“IP 地址”项目需要更改为网段内不冲突的地址；<br>
“网关”或“路由器”项目需要更改为旁路网关 IP 地址；<br>
“前缀长度”项目填写“24”；<br>
“DNS”项目需要更改为旁路网关 IP 地址（两个 DNS 输入框填写一个就可以）。</p>
<p>完成并提交设置后，关闭 WIFI 开关再打开，连接设置的 WIFI 热点，若当前网络参数为设定值，则证明设置成功。</p>
<h5 id="windows">Windows:</h5>
<figure data-type="image" tabindex="3"><img src="https://imcm.xyz/post-images/1591772774844.png" alt="" loading="lazy"></figure>
<p>在无线热点的“属性”界面下，点击 “IP 设置 - 编辑”按钮，在弹出框中更改 IP 分配模式为“手动”，打开 IPV4 的开关，根据所处网段及上文安卓的相关设置填写相关参数即可。</p>
<h3 id="注意事项">注意事项</h3>
<ol>
<li>文章所述方案适用于光猫或路由器已完成宽带拨号的网络环境，未测试也不推荐使用 Docker 内的 OpenWrt 进行宽带拨号；</li>
<li>OpenWrt 容器跟随树莓派系统启动，无需手动干预；</li>
<li>由于容器内系统内核共享宿主机内核，所以在 Luci 面板的 “内核版本”项与宿主机内核版本一致；</li>
<li>在对容器进行停止或删除操作时，树莓派可能会发生卡顿现象，SSH 可能会断开，1~2 分钟后会恢复正常，目前原因不明；</li>
<li>经测试，发现 Adblock 不工作，UnblockNeteaseMusic 需要自行设置代理，除此之外容器中的 OpenWrt 多数应用工作正常，如有发现不能正常工作的应用请评论反馈~</li>
</ol>
<p>参考资料</p>
<ol>
<li><a href="https://github.com/coolsnowwolf/lede">OpenWrt By Lean · coolsnowwolf/lede - GitHub</a></li>
<li><a href="https://www.right.com.cn/forum/thread-588747-1-1.html">【小狮子编译贴】抛砖引玉，为打造N1路由神器 - 恩山无线论坛</a></li>
<li><a href="https://www.right.com.cn/forum/thread-1048535-1-1.html">docker openwrt 踩坑的几个小问题解决过程分享 - 恩山无线论坛</a></li>
<li><a href="https://www.right.com.cn/forum/thread-506510-1-1.html">N1刷入LEAN OPENWRT做旁路网关，导致访问国内网站卡顿 - 恩山无线论坛</a></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Git 忽略文件目录权限或文件拥有者的改变]]></title>
        <id>https://imcm.xyz/post/chown-git/</id>
        <link href="https://imcm.xyz/post/chown-git/">
        </link>
        <updated>2020-06-09T09:12:49.000Z</updated>
        <summary type="html"><![CDATA[<p>git 中可以加入忽略文件权限的配置，在 git 根目录运行如下命令：</p>
]]></summary>
        <content type="html"><![CDATA[<p>git 中可以加入忽略文件权限的配置，在 git 根目录运行如下命令：</p>
<!-- more -->
<p>当前版本库忽略文件权限</p>
<pre><code class="language-shell">git config core.filemode false
</code></pre>
<p>复制所有版本库忽略文件权限</p>
<pre><code class="language-shell">git config --global core.fileMode false
</code></pre>
<p>这样就设置了忽略文件权限。</p>
<p>查看 git 的配置文件：</p>
<pre><code class="language-shell">cat .git/config
</code></pre>
<p>这时候再更新代码就 OK 了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[备份树莓派系统（MacOS)]]></title>
        <id>https://imcm.xyz/post/mac-backup-pi/</id>
        <link href="https://imcm.xyz/post/mac-backup-pi/">
        </link>
        <updated>2020-06-09T04:29:57.000Z</updated>
        <summary type="html"><![CDATA[<p>在树莓派的SD卡中初始写入了一个img系统镜像，在安装各种软件以后我们有必要对树莓派的分区进行类似GHOST的备份</p>
]]></summary>
        <content type="html"><![CDATA[<p>在树莓派的SD卡中初始写入了一个img系统镜像，在安装各种软件以后我们有必要对树莓派的分区进行类似GHOST的备份</p>
<!-- more -->
<h3 id="备份系统">备份系统</h3>
<p>将TF插入mac后，打开mac的“终端”</p>
<pre><code class="language-shell">#查询盘符
diskutil list 
# 下面图片中的dev/disk2既对应的树莓派的TF卡
</code></pre>
<p><img src="https://imcm.xyz/post-images/1591677273477.jpeg" alt="" loading="lazy"><br>
终端运行diskutil list 后显示的内容</p>
<pre><code class="language-shell"># 使用dd进行备份，同时使用gzip将备份文件进行压缩
sudo dd if=/dev/rdiskx bs=1m | gzip &gt; /path/to/backupImage.gz
#将“/dev/rdiskx ”改成您 Micro SD 卡的所在位置， if 參數是指定資料來源 (也就是 Micro #SD 卡)   of 則是指定備份影像檔的儲存路徑與檔案名稱 
</code></pre>
<p>回车后，读卡器会显示在读取数据灯在闪烁，备份过程有点长，根据卡的大小，可能会在1小时左右。</p>
<h3 id="恢复系统">恢复系统</h3>
<pre><code class="language-shell">★ 將壓縮的備份影像檔回復至 Micro SD 卡中
gzip -dc /path/to/backupImage.gz | sudo dd of=/dev/rdiskx bs=1m
※ /dev/rdiskx 請改成您 Micro SD 卡的所在位置
</code></pre>
<p>如果系统显示resource busy,表明需要先将TF卡从系统中卸载。</p>
<pre><code class="language-shell">#列出盘符名称，这里的名称显示和之前的不一样
df -f
#卸载
sudo diskutil unmount /dev/disk2s1
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://imcm.xyz/post-images/1591677296376.jpeg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[删除Mac下Git上传项目代码时产生的.DS_Store文件]]></title>
        <id>https://imcm.xyz/post/gitignore-mac/</id>
        <link href="https://imcm.xyz/post/gitignore-mac/">
        </link>
        <updated>2020-06-09T02:43:35.000Z</updated>
        <summary type="html"><![CDATA[<p>最近在 Mac 中使用 Git 上传项目时，发现 GitHub 仓库的每个文件夹下都生成了一个 .DS_Store 的文件，好奇查了一下这个文件格式，在网上搜索了一下解决办法，这里记录一下怎么删除 .DS_Store 文件以及如何在后续使用 Git时忽略掉 .DS_Store 文件。</p>
]]></summary>
        <content type="html"><![CDATA[<p>最近在 Mac 中使用 Git 上传项目时，发现 GitHub 仓库的每个文件夹下都生成了一个 .DS_Store 的文件，好奇查了一下这个文件格式，在网上搜索了一下解决办法，这里记录一下怎么删除 .DS_Store 文件以及如何在后续使用 Git时忽略掉 .DS_Store 文件。</p>
<!-- more -->
<h2 id="ds_store">.DS_Store</h2>
<p>.DS_Store 是 Mac OS 保存文件夹的自定义属性的隐藏文件，如文件的图标位置或背景色，删除后会自动生成，包含了一些文件的个人信息，如果不处理的话，可能会有一些你不一定希望别人看到的信息。</p>
<h3 id="解决办法1创建一个-gitignore-文件来忽略-ds_store">解决办法1:创建一个 .gitignore 文件来忽略 .DS_Store</h3>
<p>首先需要删除项目文件夹下已经生成的 .DS_Store 文件。</p>
<p>终端切换到项目文件夹，输入 git status 来查看是否有 .DS_Store 文件，如果有相关文件，终端输入下面的命令将它删除。</p>
<pre><code class="language-shell">find . -name .DS_Store -print0 | xargs -0 git rm -f --ignore-unmatch
</code></pre>
<p>创建一个名为.gitignore的文件</p>
<pre><code class="language-shell">touch .gitignore
</code></pre>
<p>打开创建好的 .gitignore文件</p>
<pre><code class="language-shell">open .gitignore
</code></pre>
<p>输入 .DS_Store ，然后换行继续输入 /.DS_Store ，command +s保存</p>
<p>更新项目</p>
<pre><code class="language-shell">git add --all
</code></pre>
<p>提交到远程仓库</p>
<pre><code class="language-shell">git commit -m '.DS_Store ignore'
git push
</code></pre>
<p>上面的办法只能对这个项目文件夹起作用，其它的 Git 项目文件夹要想忽略，还要重新搞一遍，所以可以做一盒全局忽略。</p>
<h3 id="解决办法2创建全局-gitignore-文件来忽略-ds_store">解决办法2:创建全局 .gitignore 文件来忽略 .DS_Store</h3>
<p>创建 .gitignore_global 文件</p>
<pre><code class="language-shell">touch .gitignore_global 
</code></pre>
<p>打开创建好的 .gitignore_global 文件</p>
<pre><code class="language-shell">Open .gitignore_global
</code></pre>
<p>输入 .DS_Store ，然后换行继续输入 /.DS_Store ，command +s保存</p>
<p>打开 .gitconfig</p>
<pre><code class="language-shell">open .gitconfig
</code></pre>
<p>在 ~/.gitconfig 中引入 .gitignore_global</p>
<pre><code>[core]
​    excludesfile = /Users/w/.gitignore_global
</code></pre>
<p>然后更新提交项目即可</p>
<blockquote>
<p>注意：user/后面填写你的电脑的用户名</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Markdown 基本语法]]></title>
        <id>https://imcm.xyz/post/markdown/</id>
        <link href="https://imcm.xyz/post/markdown/">
        </link>
        <updated>2020-06-08T10:04:09.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="主要内容">主要内容</h2>
<h4 id="-markdown是什么">- Markdown<em>是什么</em>？</h4>
<h4 id="-谁创造了它">- <em>谁</em>创造了它？</h4>
<h4 id="-为什么要使用它">- <em>为什么</em>要使用它？</h4>
<h4 id="-怎么使用">- <em>怎么</em>使用？</h4>
<h4 id="-谁在用">- <em>谁</em>在用？</h4>
<h4 id="-尝试一下">- 尝试一下</h4>
]]></summary>
        <content type="html"><![CDATA[<h2 id="主要内容">主要内容</h2>
<h4 id="-markdown是什么">- Markdown<em>是什么</em>？</h4>
<h4 id="-谁创造了它">- <em>谁</em>创造了它？</h4>
<h4 id="-为什么要使用它">- <em>为什么</em>要使用它？</h4>
<h4 id="-怎么使用">- <em>怎么</em>使用？</h4>
<h4 id="-谁在用">- <em>谁</em>在用？</h4>
<h4 id="-尝试一下">- 尝试一下</h4>
<!-- more -->
<h2 id="正文">正文</h2>
<h3 id="1-markdown是什么">1. Markdown<em>是什么</em>？</h3>
<p><strong>Markdown</strong>是一种轻量级<strong>标记语言</strong>，它以纯文本形式(<em>易读、易写、易更改</em>)编写文档，并最终以HTML格式发布。<br>
<strong>Markdown</strong>也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。</p>
<h3 id="2-谁创造了它">2. <em>谁</em>创造了它？</h3>
<p>它由<a href="http://www.aaronsw.com/"><strong>Aaron Swartz</strong></a>和<strong>John Gruber</strong>共同设计，<strong>Aaron Swartz</strong>就是那位于去年（<em>2013年1月11日</em>）自杀,有着<strong>开挂</strong>一般人生经历的程序员。维基百科对他的<a href="http://zh.wikipedia.org/wiki/%E4%BA%9A%E4%BC%A6%C2%B7%E6%96%AF%E6%B2%83%E8%8C%A8">介绍</a>是：<strong>软件工程师、作家、政治组织者、互联网活动家、维基百科人</strong>。</p>
<p>他有着足以让你跪拜的人生经历：</p>
<ul>
<li><strong>14岁</strong>参与RSS 1.0规格标准的制订。</li>
<li><strong>2004</strong>年入读<strong>斯坦福</strong>，之后退学。</li>
<li><strong>2005</strong>年创建<a href="http://infogami.org/">Infogami</a>，之后与<a href="http://www.reddit.com/">Reddit</a>合并成为其合伙人。</li>
<li><strong>2010</strong>年创立求进会（Demand Progress），积极参与禁止网络盗版法案（SOPA）活动，最终该提案被撤回。</li>
<li><strong>2011</strong>年7月19日，因被控从MIT和JSTOR下载480万篇学术论文并以免费形式上传于网络被捕。</li>
<li><strong>2013</strong>年1月自杀身亡。</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://github.com/younghz/Markdown/raw/master/resource/Aaron_Swartz.jpg" alt="Aaron Swartz" loading="lazy"></figure>
<p>天才都有早逝的归途。</p>
<h3 id="3-为什么要使用它">3. <em>为什么</em>要使用它？</h3>
<ul>
<li>它是易读（看起来舒服）、易写（语法简单）、易更改<strong>纯文本</strong>。处处体现着<strong>极简主义</strong>的影子。</li>
<li>兼容HTML，可以转换为HTML格式发布。</li>
<li>跨平台使用。</li>
<li>越来越多的网站支持Markdown。</li>
<li>更方便清晰地组织你的电子邮件。（Markdown-here, Airmail）</li>
<li>摆脱Word（我不是认真的）。</li>
</ul>
<h3 id="4-怎么使用">4. <em>怎么</em>使用？</h3>
<p>如果不算<strong>扩展</strong>，Markdown的语法绝对<strong>简单</strong>到让你爱不释手。</p>
<p>Markdown语法主要分为如下几大部分：<br>
<strong>标题</strong>，<strong>段落</strong>，<strong>区块引用</strong>，<strong>代码区块</strong>，<strong>强调</strong>，<strong>列表</strong>，<strong>分割线</strong>，<strong>链接</strong>，<strong>图片</strong>，<strong>反斜杠 <code>\</code></strong>，<strong>符号'`'</strong>。</p>
<h4 id="41-标题">4.1 标题</h4>
<p>两种形式：<br>
1）使用<code>=</code>和<code>-</code>标记一级和二级标题。</p>
<blockquote>
<p>一级标题<br>
<code>=========</code><br>
二级标题<br>
<code>---------</code></p>
</blockquote>
<p>效果：</p>
<blockquote>
<h1 id="一级标题">一级标题</h1>
<h2 id="二级标题">二级标题</h2>
</blockquote>
<p>2）使用<code>#</code>，可表示1-6级标题。</p>
<blockquote>
<p># 一级标题<br>
## 二级标题<br>
### 三级标题<br>
#### 四级标题<br>
##### 五级标题<br>
###### 六级标题</p>
</blockquote>
<p>效果：</p>
<blockquote>
<h1 id="一级标题-2">一级标题</h1>
<h2 id="二级标题-2">二级标题</h2>
<h3 id="三级标题">三级标题</h3>
<h4 id="四级标题">四级标题</h4>
<h5 id="五级标题">五级标题</h5>
<h6 id="六级标题">六级标题</h6>
</blockquote>
<h4 id="42-段落">4.2 段落</h4>
<p>段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用<strong>两个以上</strong>空格加上回车（引用中换行省略回车）。</p>
<h4 id="43-区块引用">4.3 区块引用</h4>
<p>在段落的每行或者只在第一行使用符号<code>&gt;</code>,还可使用多个嵌套引用，如：</p>
<blockquote>
<p>&gt; 区块引用<br>
&gt;&gt; 嵌套引用</p>
</blockquote>
<p>效果：</p>
<blockquote>
<p>区块引用</p>
<blockquote>
<p>嵌套引用</p>
</blockquote>
</blockquote>
<h4 id="44-代码区块">4.4 代码区块</h4>
<p>代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如<br>
普通段落：</p>
<p>void main()<br>
{<br>
printf(&quot;Hello, Markdown.&quot;);<br>
}</p>
<p>代码区块：</p>
<pre><code>void main()
{
    printf(&quot;Hello, Markdown.&quot;);
}
</code></pre>
<p><strong>注意</strong>:需要和普通段落之间存在空行。</p>
<h4 id="45-强调">4.5 强调</h4>
<p>在强调内容两侧分别加上<code>*</code>或者<code>_</code>，如：</p>
<blockquote>
<p>*斜体*，_斜体_<br>
**粗体**，__粗体__</p>
</blockquote>
<p>效果：</p>
<blockquote>
<p><em>斜体</em>，<em>斜体</em><br>
<strong>粗体</strong>，<strong>粗体</strong></p>
</blockquote>
<h4 id="46-列表">4.6 列表</h4>
<p>使用<code>·</code>、<code>+</code>、或<code>-</code>标记无序列表，如：</p>
<blockquote>
<p>-（+*） 第一项<br>
-（+*） 第二项<br>
- （+*）第三项</p>
</blockquote>
<p><strong>注意</strong>：标记后面最少有一个_空格_或_制表符_。若不在引用区块中，必须和前方段落之间存在空行。</p>
<p>效果：</p>
<blockquote>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
</blockquote>
<p>有序列表的标记方式是将上述的符号换成数字,并辅以<code>.</code>，如：</p>
<blockquote>
<p>1 . 第一项<br>
2 . 第二项<br>
3 . 第三项</p>
</blockquote>
<p>效果：</p>
<blockquote>
<ol>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ol>
</blockquote>
<h4 id="47-分割线">4.7 分割线</h4>
<p>分割线最常使用就是三个或以上<code>*</code>，还可以使用<code>-</code>和<code>_</code>。</p>
<h4 id="48-链接">4.8 链接</h4>
<p>链接可以由两种形式生成：<strong>行内式</strong>和<strong>参考式</strong>。<br>
<strong>行内式</strong>：</p>
<blockquote>
<p>[younghz的Markdown库](https:😕/github.com/younghz/Markdown &quot;Markdown&quot;)。</p>
</blockquote>
<p>效果：</p>
<blockquote>
<p><a href="https:://github.com/younghz/Markdown" title="Markdown">younghz的Markdown库</a>。</p>
</blockquote>
<p><strong>参考式</strong>：</p>
<blockquote>
<p>[younghz的Markdown库1][1]<br>
[younghz的Markdown库2][2]<br>
[1]:https:😕/github.com/younghz/Markdown &quot;Markdown&quot;<br>
[2]:https:😕/github.com/younghz/Markdown &quot;Markdown&quot;</p>
</blockquote>
<p>效果：</p>
<blockquote>
<p><a href="https:://github.com/younghz/Markdown" title="Markdown">younghz的Markdown库1</a><br>
<a href="https:://github.com/younghz/Markdown" title="Markdown">younghz的Markdown库2</a></p>
</blockquote>
<p><strong>注意</strong>：上述的<code>[1]:https:://github.com/younghz/Markdown &quot;Markdown&quot;</code>不出现在区块中。</p>
<h4 id="49-图片">4.9 图片</h4>
<p>添加图片的形式和链接相似，只需在链接的基础上前方加一个<code>！</code>。</p>
<h4 id="410-反斜杠">4.10 反斜杠<code>\</code></h4>
<p>相当于<strong>反转义</strong>作用。使符号成为普通符号。</p>
<h4 id="411-符号">4.11 符号'`'</h4>
<p>起到标记作用。如：</p>
<blockquote>
<p>`ctrl+a`</p>
</blockquote>
<p>效果：</p>
<blockquote>
<p><code>ctrl+a</code></p>
</blockquote>
<h4 id="5-谁在用">5. <em>谁</em>在用？</h4>
<p>Markdown的使用者：</p>
<ul>
<li>GitHub</li>
<li>简书</li>
<li>Stack Overflow</li>
<li>Apollo</li>
<li>Moodle</li>
<li>Reddit</li>
<li>等等</li>
</ul>
<h4 id="6-尝试一下">6. 尝试一下</h4>
<ul>
<li><strong>Chrome</strong>下的插件诸如<code>stackedit</code>与<code>markdown-here</code>等非常方便，也不用担心平台受限。</li>
<li><strong>在线</strong>的dillinger.io评价也不错</li>
<li><strong>Windowns</strong>下的MarkdownPad也用过，不过免费版的体验不是很好。</li>
<li><strong>Mac</strong>下的Mou是国人贡献的，口碑很好。</li>
<li><strong>Linux</strong>下的ReText不错。</li>
</ul>
<p><strong>当然，最终境界永远都是笔下是语法，心中格式化 😃。</strong></p>
<hr>
<p><strong>注意</strong>：不同的Markdown解释器或工具对相应语法（扩展语法）的解释效果不尽相同，具体可参见工具的使用说明。<br>
虽然有人想出面搞一个所谓的标准化的Markdown，[没想到还惹怒了健在的创始人John Gruber]<br>
(http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/ )。</p>
<hr>
<p>以上基本是所有traditonal markdown的语法。</p>
<h3 id="其它">其它：</h3>
<p>列表的使用(非traditonal markdown)：</p>
<p>用<code>|</code>表示表格纵向边界，表头和表内容用<code>-</code>隔开，并可用<code>:</code>进行对齐设置，两边都有<code>:</code>则表示居中，若不加<code>:</code>则默认左对齐。</p>
<table>
<thead>
<tr>
<th style="text-align:center">代码库</th>
<th>链接</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">MarkDown</td>
<td><a href="https://github.com/younghz/Markdown" title="Markdown">https://github.com/younghz/Markdown</a></td>
</tr>
<tr>
<td style="text-align:center">MarkDownCopy</td>
<td><a href="https://github.com/younghz/Markdown" title="Markdown">https://github.com/younghz/Markdown</a></td>
</tr>
</tbody>
</table>
<p>关于其它扩展语法可参见具体工具的使用说明。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://imcm.xyz/post/hello-gridea/</id>
        <link href="https://imcm.xyz/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>